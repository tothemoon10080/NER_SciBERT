Motivated by an underground mining operation at Kiruna, Sweden, we formulate a mixed integer program to schedule iron ore production over multiple time periods. Our optimization model determines an operationally feasible ore extraction sequence that minimizes deviations from planned production quantities. The number of binary decision variables in our model is large enough that directly solving the full, detailed problem for a three year time horizon requires hours, or even days. We therefore design a heuristic based on solving a smaller, more tractable, model in which we aggregate time periods, and then solving the original model using information gained from the aggregated model. We compute a bound on the worst case performance of this heuristic and demonstrate empirically that this procedure produces good quality solutions while substantially reducing computation time for problem instances from the Kiruna mine.We develop a mixed integer programming model to determine a multi-time period extraction sequence of ore blocks in an underground mine. The goal is to minimize the deviation between actual and planned production quantities subject to operational constraints. Because the number of binary decision variables representing whether or not to extract a given piece (or Although the importance of using integer programming models to determine discrete production scheduling decisions in the mining industry has been identified (e.g., The paper is organized as follows: In Section Our research is motivated by operations at Sweden’s Loussavaara-Kiirunavaara Aktiebolag (LKAB) Kiruna mine, currently the second largest underground mine in the world. The mine contains a world-class high-grade magnetite deposit, approximately 4 The mine produces two raw ore types, The goal of our scheduling model is to determine an operationally feasible sequence in which to mine the machine placements such that the amounts of Vertical sequencing constraints require that if machine placement We can determine an earliest possible start time for each machine placement, i.e., a time before which a machine placement cannot have started to be mined, by applying vertical sequencing and LHD availability constraints to a given machine placement. We can similarly determine a latest possible start time for each machine placement, i.e., a time at which a machine placement must start to be mined, by applying horizontal sequencing constraints to machine placements on a sublevel with an active machine placement, i.e., a machine placement that is currently being mined. We can then use earliest and latest possible start times in our model formulation as follows: (i) if the earliest and latest possible start times for a machine placement are equal, then we fix the variable value to one corresponding to starting to mine that machine placement at that start time; (ii) if a machine placement does not have a latest possible start time that occurs before the end of the horizon, then the machine placement may or may not start to be mined during the horizon, but certainly cannot start to be mined more than once during the horizon; (iii) if a machine placement has a latest possible start time that falls before the end of the horizon, then the machine placement must start to be mined during the horizon; and (iv) the set of time periods in which a machine placement can start to be mined lies between its earliest and latest possible start times. Solving the following integer programming model provides values for the decision variables that correspond to a production schedule, i.e., whether or not to start mining a machine placement in a given time period. Our model is unique in that we address the operations of a sublevel caving mine (many underground models apply to sublevel stopping mines) with its own set of restrictions such as the inability to hold inventory and the necessity to adhere to specific sequencing constraints.                   LHD      The objective function minimizes the deviation from the demanded quantities of each ore type. Constraints The principal variables in our formulation are binary variables indicating whether to start to mine a machine placement in a given time period, or not. We present an optimization-based heuristic to improve model tractability in which we solve an aggregated model to determine a set of “reasonably good” starting times for each machine placement, allowing us to restrict the model to a subset of start time choices beyond the restrictions from the early and late start algorithms. In this section, we describe the aggregation procedure and several of its variations, and conclude with a review of other aggregation techniques. Our aggregation procedure consists of first “collapsing” our multi-period production-scheduling model to reduce its size. We aggregate demands and the amount of ore in each machine placement that can be mined in a single time period into data corresponding to Observe that the solution for ( After solving the aggregated model, we add constraints to the original model, ( Note that we could equivalently construct (   Note that for any Because we are, in essence, changing the objective function in the aggregated model (from the original model) by eliminating penalties for deviations incurred during consecutive time periods within a phase, we cannot expect to obtain an optimal solution by solving ( We could use the solution from the aggregated model in a less restrictive way to enhance the solution quality of the original model. Specifically, we could allow a machine placement start in the time periods contained in the Improving the tractability of integer programming problems using aggregation is not new. Aggregation techniques depend highly on the structure of the problem, and, in general, are tailored specifically for a class of problems or even for a specific problem instance. Research subsequent to 1990 on aggregation techniques used to solve integer programs includes  Researchers also use aggregation to help solve dynamic programs, e.g., Constraint aggregation can be used to develop a general class of constraints, Our aggregation heuristic uses information gained from a model in which time periods and the associated demand and production data are aggregated into phases. However, our procedure differs from others mentioned here in that: (i) we solve a disaggregated model, but use information gained from the aggregated model to eliminate variables, and/or (ii) our procedure can be applied to any general multi-period production scheduling problem, see, e.g., In this section, we show how to compute a bound on the worst case performance of our aggregation procedure for the implementation we describe in Section The maximum total deviation in the worst case is the sum of these expressions above, one for each ore type and for each phase of the aggregated model added to the deviation between the time periods that separate the phases. (The latter term consists of those deviations that appear in the objective function of the aggregated model.) Consider the following single ore type, single phase example: Suppose that the phase consists of three time periods, with demands in periods 1, 2, and 3 of 1 (ton), 2 (tons), and 3 (tons), respectively. Suppose also that the solution to the aggregated model produces 4 (tons) in the single phase. In the worst case, the disaggregated model produces Were our objective only to consider underproduction, the worst possible outcome would be to produce nothing in any time period, resulting in a 6 We illustrate empirically the benefits of our aggregation method using five actual data sets from the mine. Each data set contains a group of 36-month periods, and has two ore types. Ore reserves for each type are between zero and 180 We solve our mixed integer program using the AMPL programming language ( For each scenario, after solving the aggregated model, we solve the restricted model, that is, a corresponding disaggregated model in which we impose constraints of varying flexibility. The most restrictive set of constraints requires that the time period in which each machine placement starts be contained in the phase in which the machine placement starts in the aggregated model. We alternatively impose constraints of increasing flexibility that require that the time period in which each machine placement starts be contained either in the phase in which the machine placement starts in the aggregated model, or in one of the In general, the quality of the solutions obtained with the restricted model increases at the expense of slower solution times. We seek a reasonable tradeoff between solution time and solution quality using our aggregation procedure. In  We emphasize that these conclusions hold for our particular model structure and representative data sets. For any general multi-period scheduling model and corresponding data sets, the best tradeoff between solution quality and solution time could well lie at another value for The solution times for ( Other (larger) models may lend themselves to the use of aggregated models with coarser granularity that are faster to solve but that provide looser restrictions on the corresponding original model, which increases solution times of the restricted model. In fact, we conducted numerical experiments aggregating four time periods into a phase. However, for our instances, we find the granularity with more than two time periods per phase is too coarse to provide precise enough information for use in the original model. And, this loss of information comes at the expense of solution quality, which, in our experiments, is not offset by overall faster solution times. Although the aggregation procedure performs well on our data sets, for We were able to use this method to generate very long-term (10–15 year) plans for the Kiruna mine using different types of data sets containing two and three raw ore types. These schedules help guide several different strategic planning decisions: (i) the time at which the new main production level should start to be constructed, and (ii) the number of ore types to consider. The latter decision is evaluated by examining the tradeoff between a higher degree of differentiation among the quality of the ore types and a potentially higher deviation between desired and actual production quantities, for three versus two raw ore types. At the time of the writing of this paper, the mine plans to use these results to aid in its long-term strategic decisions; the determination of these decisions is still ongoing. Kiruna does use the long-term model (without the aggregation procedure) to generate three- to five-year schedules. Faced with a large integer programming model for production scheduling, we use an aggregation procedure to first establish “reasonable” start times for each machine placement, and then impose constraints on ( Extensions to our work include improving the quality of our production schedules by, for example, incorporating constraints on the minimum or maximum allowable deviation between “phases” into the aggregated model, which could result in better information being passed to the restricted model. We could also explore other forms of the objective function, such as minimizing cumulative deviation, or minimizing successive time periods of underproduction and successive periods of overproduction. These objectives may smooth under- and over-production, although in our numerical experiments, we found Kiruna’s mine geometry and ore body composition to be sufficiently restrictive so as to result in relatively few solutions, regardless of the form of the objective. The authors would like to thank LKAB for the opportunity to work on this challenging project and for permission to publish these results. The authors would specifically like to thank LKAB employees Hans Engberg, Anders Lindholm, and Jan-Olov Nilsson for providing information, assistance, and support in this endeavor. The authors would also like to thank Professor Kevin Wood of the Naval Postgraduate School, Professor Candi Yano of the University of California, Berkeley, and several anonymous referees for helpful comments and suggestions on earlier drafts.