In this work we address the Precedence Constrained Production Scheduling Problem (PCPSP), the problem of scheduling tasks in such a way that total profit is maximized, while satisfying conditions such as precedence constraints among tasks and side constraints. A motivation for addressing this problem comes from open-pit mining industry, where the PCPSP seeks to maximize the net present value of an ore deposit by selecting the blocks (tasks) to extract, their extraction periods and their processing options, while satisfying constraints as precedences among blocks, limited availability of operational resources and maximum and/or minimum allowable concentrations of ore-grade or pollutants. Since real-world models have millions of blocks and constraints, the monolithic problem is computationally intractable. This article presents a hybrid heuristic algorithm that combines a rolling horizon decomposition with a block preselection procedure, allowing near-optimal solutions to be quickly determined. The proposed heuristic was tested on all the PCPSP instances of the MineLib library and has shown a significant improvement over the previous reported results. Moreover, a good feasible solution has been found for the instance W23, for which no solution has been previously reported.The Precedence Constrained Production Scheduling Problem (PCPSP) belongs to a special class of problems commonly found in operations management and production planning, where tasks must be scheduled over a time horizon and assigned to a destination (i.e. a processing facility), satisfying production capacity constraints and precedence constraints, while maximizing profits. Simplified versions of this problem only consider a single-period, i.e., they do not take into account the temporal dimension In long-term open-pit mine production planning the goal is to maximize the net present value of the extracted and processed material. In such mines, the mineral is reached by digging material from the surface. Depending on its composition, its profitability, and the availability of the processing facilities, the extracted material is either assigned to a processing facility, accumulated into stockpiles for later processing, or put into waste dumps. To define what portions of the terrain must be mined at each time-period, the terrain is modeled as a three-dimensional grid of blocks and the planning horizon is discretized into periods. In this application, tasks correspond to blocks and the objective is to find the best strategy to extract and process the blocks. For each block, estimations on the ore content, tonnage, and other relevant attributes are constructed by using geostatistical methods (see In mining context, the PCPSP is the problem of determining which blocks to extract at each period in the planning horizon, and of assigning each extracted block to a processing facility, while maximizing the discounted profit satisfying technical and operational constraints. Examples of technical constraints are the slope precedences, by which the extraction of a block is feasible when a determined set of blocks located above it has been extracted, respecting maximum slope angles to ensure the stability of the pit walls. Operational constraints are inherent to the extraction process: the amount of material to be transported and processed (operational resources) at each period is generally subject to upper and possibly lower limits. Processing material also implies satisfying blending constraints associated with its quality. Indeed, the efficiency of the processing, even its feasibility, depends on the combination of blocks processed simultaneously at a facility. In particular, it may not be feasible to process alone a block with a high content of pollutants such as arsenic, even with a high ore-grade. In such case, it could be possible to process it by mixing it with other blocks (even low ore-grade ones) whenever the blending provides an acceptable amount of pollutants. Most of the real instances of the PCPSP in the mining industry are difficult to solve with block models containing millions of blocks for a planning horizon as long as several decades. The main contribution of this article is to propose a hybrid heuristic based on a sliding time-window and a linear relaxation to preselect a small subset of blocks to be scheduled within each time-window. Contrary to other existing heuristics applied to the PCPSP, the proposed algorithm is able to tackle problems with blending constraints. The remainder of this article is organized as follows: Lerchs and Grossmann Closer to the problem under consideration in this article, the pioneer work of Johnson Because of the difficulty to directly solve PCPSP instances of practical sizes, many algorithms have been proposed to find good feasible solutions of this problem and its variations. A well-studied variation consists in setting the destination of each block The particular case of the PCPSP, which includes block destinations, slope precedence, capacity and blending constraints, has been previously studied. Bienstock and Zuckerberg Espinoza et al. While some authors have proposed outperforming solutions for the MineLib CPIT instances (see Lamghari et al. This article tackles the PCPSP as introduced by Espinoza et al. Denote by We define binary variables In this formulation, the objective function General side constraints may represent blending requirements to feed processing plants, but other examples are presented in Espinoza et al. We use a The PCPSP is a strongly NP-hard problem Starting from the first period Similar approaches have been explored by Cullenbine et al. Despite a significant reduction of the number of decision variables and constraints when the problem is decomposed into simpler subproblems as described in Let We define It is worth noting that in this procedure the expected times are used as a block preselection tool to reduce the size of the subproblems: they are not used to generate a sequence of blocks as proposed in the TopoSort heuristic developed by Chicoisne et al. The proposed hybrid heuristic combines a rolling horizon method in order to reduce the number of periods in each subproblem ( Basically, the algorithm has the following steps: Select a time-window, according to Select a sub-block model, in accordance with Construct a subproblem. Solve the subproblem to select the blocks to be extracted and processed. Stop if the termination condition (time limit or gap) is satisfied or if no feasible solution can be identified, otherwise go to the Step 1.  The algorithm keeps a set The subproblem is solved over blocks The set of scheduled blocks The time-window moves forward by Δ periods. A more detailed description of the hybrid heuristic algorithm is presented in At Step 1 the LP relaxation of the PCPSP model is solved with the Bienstock-Zuckerberg algorithm As the success of the proposed hybrid heuristic depends on the choice of parameters The procedure used to determine the value of the parameter The length The parameter Δ is the length of the sliding shift. It is also the number of periods of the incumbent time-window whose respective decision variables will be fixed. In this section a small numerical example of the PCPSP with only one destination is presented to compare the proposed heuristic with a pure rolling horizon heuristic. The pure rolling horizon heuristic is used with parameters The hybrid heuristic is applied on the same block model with the parameters A 3.79% gap solution is obtained with the proposed heuristic compared with a 4.98% gap for the pure rolling horizon approach. We observe in this example that the pure rolling horizon heuristic tends to act in a more greedy fashion than the proposed heuristics guided by the expected extraction times. It is worth noting that the proposed heuristic also tends to run faster than the pure rolling horizon heuristic. Indeed, for each subproblem the proposed heuristic considers fewer blocks than the pure rolling horizon heuristic. In the first subproblem of this example, 14 blocks are considered in the pure rolling horizon heuristic when only 6 blocks are considered in the proposed heuristic (see This section presents the details regarding the implementation of the proposed heuristic and the results obtained on a set of instances from the MineLib library The proposed algorithm was coded in C++ with Gurobi 6.5.2 API and executed on a 64-bit Windows OS workstation with ten 2.6 GHz Intel Xeon E5 2660 v3 processors and 120 Gb RAM. To solve the partitioning problem, we implemented the BZ algorithm The instances come from the publicly available MineLib library As mentioned before, the hybrid heuristic may fail to find a feasible solution, and for this reason a solving strategy is used as a subroutine. The solving strategy first sets the parameter   The parameters  For example, for the instance  It is noteworthy that no feasible solution has been previously reported for the instance While running the proposed heuristic, a feasible solution with 1.76% optimality gap has been found for the instance Among all instances we observe a 14.98% gap reduction on average when the instance Regarding the parameters setting, the tolerance parameter The more time-consuming instances are As a final comment, the reported results were found by following the procedure according to In In  With a computing time limit set to 36,000 s, the pure rolling horizon approach is able to provide feasible solutions for 7 out of 10 MineLib instances, and the heuristic runs out of time for 3 remaining instances. Comparing the results of the pure rolling horizon approach with the best known solutions, better results are obtained while applying the pure rolling horizon approach to instances Compared with the pure rolling horizon heuristic, the proposed hybrid heuristic finds better results for all instances, with an average of 79.8% gap reduction for the instances for which a feasible solution is found with the pure rolling horizon heuristic. We introduce a hybrid heuristic algorithm using a block preselection procedure based on expected extraction times to solve the PCPSP. The problem is decomposed into smaller and easier subproblems on a rolling horizon basis, where a reduced set of blocks is preselected according to the LP relaxation solution of the complete problem. When applied to the all PCPSP instances of the MineLib library without blending constraints, the results obtained by the proposed heuristic show a significant improvement for 6 out of 9 pre-existing results reported by Espinoza et al. As a future direction of research it would be interesting to improve the expected extraction times by strengthening the formulation for the initial integer relaxation and the subproblems, for example by adding clique cuts as suggested by E. Jélvez, N. Morales and P. Nancel-Penard were supported by An extension of the pure rolling horizon approach is presented by  In general, there is a significant variability in both size and solving-time among the subproblems, specially between the first and the last subproblem as the last ones contains few blocks. For example, the instance The most important results from In the instances Similarly to When comparing with the performance obtained from the proposed heuristic with Similar to the case with parameters For the instances As an attempt to find better solutions given the time available, in the instances