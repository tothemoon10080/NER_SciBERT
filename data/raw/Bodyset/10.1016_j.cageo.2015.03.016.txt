Pixel-based simulation algorithms are the most widely used geostatistical technique for characterizing the spatial distribution of natural resources. However, sequential simulation does not scale well for stochastic simulation on very large grids, which are now commonly found in many petroleum, mining, and environmental studies. With the availability of multiple-processor computers, there is an opportunity to develop parallelization schemes for these algorithms to increase their performance and efficiency. Here we present a conflict-free, path-level parallelization strategy for sequential simulation. The method consists of partitioning the simulation grid into a set of groups of nodes and delegating all available processors for simulation of multiple groups of nodes concurrently. An automated classification procedure determines which groups are simulated in parallel according to their spatial arrangement in the simulation grid. The major advantage of this approach is that it does not require conflict resolution operations, and thus allows exact reproduction of results. Besides offering a large performance gain when compared to the traditional serial implementation, the method provides efficient use of computational resources and is generic enough to be adapted to several sequential algorithms.Numerical modeling of natural phenomena is commonly performed with geostatistical techniques owing to their conditioning capabilities and relatively fast processing time when compared to process-based and surface-based methods. These techniques rely on spatial correlation of available data for statistical inference of parameters required to derive the uncertainty distribution at uninformed grid nodes. In the last few years, the size of the simulation grids used to represent geological models in petroleum, mining, and environmental applications has increased by orders of magnitude. Although efficient pixel-based geostatistical simulation algorithms have been developed, the computational costs remain high for very large grids. With the availability of multiple-processor computers and multicore central processing units (CPUs), as well as graphics processing units (GPUs) for general purpose computing, development of parallel schemes for traditional sequential simulation algorithms is essential for full utilization of these resources, which can reduce the execution time and optimize memory consumption. Moreover, such a strategy can contribute to further increases in the resolution and overall size of these simulation grids. Parallel computing is a common strategy for reducing processing time and increasing the resolution capacity (scalability) of algorithms. Despite their benefit in terms of performance, some of the parallel versions of sequential algorithms require conflict management systems. This is especially true when one is considering parallelization of a simulation at the path level. Conflicts occur when nodes being simulated in parallel have overlapping neighborhoods. In order to preserve the statistical quality of the results, a system must manage these conflicts through resimulation, waiting, or postponing operations. The biggest issue related to this approach is that it does not allow the exact reproduction of results, making it unsuitable to several applications. Here we present a general framework consisting of a straightforward conflict-free parallelization method that can be applied to any sequential simulation algorithm using shared or distributed memory architectures. The proposed strategy is a path-level parallelization approach mainly inspired by previous work by The methodology is illustrated by practical implementation of a parallel version of the sequential Gaussian simulation (SGS) algorithm as a plugin in the SGeMS software ( Sequential simulation comprises a broad class of simulation methods widely used in geostatistics to generate realizations of random fields ( Despite their specific features, all sequential simulation methods follow the same formalism to generate a set of realizations. These techniques are based on decomposition of the multivariate probability density function (pdf) of a stationary and ergodic random function to the product of univariate posterior distribution functions ( All the aforementioned simulation methods share a common peculiarity: they are all based on serial simulation of a single node at a time. This strategy offers excellent conditioning capabilities, but it is also extremely inefficient for simulation on large grids. Exceptions to this node-by-node framework are the FILTERSIM (  Parallelization at realization level involves computation of each realization by a different processor. The major advantage in parallelizing at this level is that no communication between processors is required. However, this is an inappropriate solution when performing sensitivity analyses of results for specific parameters in cases with large simulation grids. The second approach consists of parallelizing at the path level. In this case, the simulation grid can be subdivided into zones composed of groups of nodes, and different processors are assigned to compute the calculations for each zone ( The main drawback of the master–slave architecture is that it generates conflicts when a node to be simulated has other nodes within its neighborhood being simulated by other processors. Remediation of conflicts commonly requires resimulation procedures, alterations in the simulation path, waiting operations, or postponing strategies ( In the following section, the proposed method is presented. The methodology consists of a path-level parallelization scheme for sequential simulation that avoids the use of conflict resolution procedures. The algorithm is an evolution of the methodology presented by Consider a grid The sequential simulation procedure is based on sampling from the The concept of the proposed method is based on an extension of the traditional sequential simulation decomposition process of posterior pdfs into a sequence of Each PGP consists in a subset of the simulation grid and its size is a function of the search neighborhood dimensions. In this paper, we assume that each grid partition has a regular hexahedral shape with dimensions equal to the search neighborhood or search template radii. Nevertheless, it should be noted that different geometric shapes can also be adopted. The algorithm initially subdivides the simulation grid into a set of PGPs and classifies which partitions can be simulated in parallel by different processors. The classification process is responsible for generating a conflict-free sequence of simulation stages, which ensures that no node having other nodes within its neighborhood is being simulated by other processors at the same stage. The PGP stage classification procedure is inspired by the four color theorem ( The proposed method consists of generating a set of independent realizations in multiple PGPs simultaneously, instead of the traditional node-by-node sequential simulation approach. To reproduce the spatial structure and avoid generating artifacts due to screening effects caused by previously simulated nodes over adjacent grid partitions, each PGP is not completely filled during its respective simulation stage. Instead, the algorithm breaks down each PGP simulation into a sequence of small simulations of a limited number of nodes based on the number of PGP visits. The number of nodes mentioned is equal to the ratio The methodology flow is summarized in  It is worth noting that the proposed strategy may lose some of its performance if applied to simulation methods where the CPU cost per node is variable, especially when conditioning data are not evenly distributed in the simulation domain. This is evident in Conflict-free parallel sequential simulation. The proposed methodology was evaluated with an SGS version of the algorithm in three case studies: conditional simulation using the Walker Lake data set ( The first case study illustrates application of the proposed technique to a conditional simulation problem using the Walker Lake data set. We also evaluated the impact of the PGP visits parameter on the results. A reference model composed of 100 realizations was generated with the traditional SGS and compared against a set of parallel SGS-simulated models produced by partitioning the simulation grid into 20 PGPs irregularly distributed over four simulation stages with 1, 2, 4, 10, 20, 50, and 100 PGP visits. The Walker Lake data set consists of two correlated variables, The experimental semivariogram for The conditional simulation was performed on a Cartesian grid containing 78,000 nodes with dimensions of 260×300×1 nodes. An elliptic search neighborhood with a maximum radius of 70 and a minimum radius of 40 nodes was set to allow a maximum number of 12 data points and 12 previously simulated nodes. An octant search option was used with a minimum of 1 and a maximum of 6 nodes per octant. The grid partitioning scheme is presented in  To evaluate reproduction of the spatial structure and ergodic fluctuations of the simulated models, directional experimental semivariograms were computed for all realizations. The second case study involved generating sets of 100 unconditional realizations of a standard normal variable, also termed The main objective of the experiment was to submit the methodology to complex conditions involving the use of a Gaussian model as the spatial structure function and no octant search options. Under these conditions, the simulation is highly spatially dependent and very sensitive to screening effects due to node clustering, which facilitates visual detection of artifacts and irregularities in the semivariogram reproduction. The unconditional simulations were performed on a 3D Cartesian grid containing 2.4×10  However, The computational efficiency of the algorithm was evaluated in unconditional simulations in Gaussian space in a large 3D simulation grid. The aim of the tests was to analyze the algorithm performance using from 1 to 64 processors on an SGI H2106 server with a 4×AMD Opteron 6376 16-core, 2.3-GHz machine with 256 The simulation grid was partitioned into a total of 512 PGPs regularly distributed (64 PGPs per stage) over eight simulation stages. The spatial model consists of a semivariogram comprising one anisotropic spherical structure with a contribution of 1.0, with an ellipsoidal search neighborhood with radii of 128×128×16 nodes, set up to allow a maximum of 40 previously simulated nodes: Execution time and speed-up curves for this case study are plotted in The speed-up was calculated as We presented a path-level parallelization approach for sequential simulation. The methodology was illustrated with a parallel version of the SGS algorithm. Besides offering a large performance improvement, the proposed strategy delivers reproducibility. The simulation grid subdivision into PGPs, combined with the simulation stage classification, avoids conflict resolution operations. Note that this requires the user to explicitly define the PGP spatial distribution, sequence of simulation stages over the grid and the number PGP visits. Moreover, the methodology enables efficient use of computational resources, since the workload can be evenly distributed between all available processors based on grid partitioning. The total number of PGPs is a function of the search neighborhood dimensions and the number of processors available. The PGP simulation stage classification takes into account the spatial distribution of partitions within the simulation grid to generate a conflict-free simulation sequence. The PGP visits parameter facilitates precise reproduction of the spatial correlations, especially when performing unconditional simulations or dealing with sparse data sets, without significantly compromising the algorithm performance. The algorithm performance is maximized when the search neighborhood dimensions are relatively small compared to the size of the simulation domain. This is usually the case when working with large grids commonly used to discretize oil or gas reservoirs and mineral deposits, for example. The proposed method does not suffer from quality or information loss drawbacks, and reproduces all the statistics of the traditional SGS implementation. Future studies could focus on exploring different clustering strategies for partition of PGPs and applying the methodology to other sequential simulation algorithms. The authors would like to thank Alexandre Boucher, Clayton Deutsch, Jairo Panetta, Luiz Eduardo Varella, and Hervé Gross for their support. We are also grateful for the constructive comments of the reviewers.