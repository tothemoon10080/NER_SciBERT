A genetic algorithm (GA) is proposed along with a general framework for the scheduling of a typical multipurpose/product batch plant. The majority of literature regarding these problems make use of mathematical programming methods. Modelling problems in this manner leads to numerous binary variables relating to material balance and sequence of batches along long time horizons, thus resulting in large computational time. The proposed GA does not suffer the same scalability issues of mathematical programming approaches. The GA makes use of a coupled chromosome system with specific crossover and mutation functions utilised with the purpose of profit maximisation. Results show that optimal or close-to-optimal solutions can be achieved with a reduction of up to 98.53% computational time in certain cases.rate for neighbourhood radius vector of volume states at given event point mutation rate for child mutation selection rate for parent selection integer crossover point for chromosomes the time horizon the set of all event points the set of all units the number of event points in the set instruction set for unit Over the past two decades batch process research has arisen in both industrial and academic domains alike. Economic changes have led to a demand for high value – small volume products. The flexible nature of batch plants allow for the production of multiple products utilising the same facility. However, this benefit results in increased complexity in the scheduling of the facility. Plant configurations differ in complexity, ranging from simpler single-stage plants (numerous parallel machines) to challenging multistage and multipurpose plants. A large and growing amount of research focusses on the development of optimisation techniques to determine these schedules, specifically schedules that minimize the time required to attain a given objective value. Ideally these techniques should find this objective value in the minimum computational time possible. Earliest work in process scheduling primarily focussed on flow-shop and general multistage batch plants while seminal work on multipurpose batch plants was proposed by In any of the aforementioned formulations, time can be handled with either discrete-time models or continuous-time models. Pioneering models initially made use of discrete-time representations ( The above advances in continuous-time formulations and STN/SSN approaches primarily attempt to reduce the number of binary variables in the formulation, thus allowing for a more feasible computational solution time. When considering larger scale scheduling problems however, the number of binary variables is set to scale regardless of the quality of the representation, resulting in intractable solution times. Since the aforementioned issue regarding the selected number of event points required exists, the suggestion of non-deterministic techniques being applied to these problems seems relevant. This is especially true when considering the scalability of these techniques when large problem sizes are involved. Some work has been conducted in the application of metaheuristic techniques to batch processes, such as a genetic algorithm (GA) in This work investigates a well-posed and well understood case study of a multipurpose batch plant. Originally presented in Before introducing the new framework and solution method, we discuss the two examples to be utilised. In In both examples we consider variable processing times. As mentioned previously, most approaches thus far have made use of mathematical programming. These have been successful in handling constraints when dealing with assigning of batch tasks to units while preserving the material balances for the resultant states. They also effectively handle the syntactical structure of the plant layout such as sequence dependence and storage constraints. The proposed framework obeys the recipe dependent constraints introduced in any of the STN descriptions presented by The strategy and framework presented works for both multipurpose and multiproduct batch plants, hence the inclusion of an example of each. We describe the procedure as follows: Select the number of event points required for the time horizon. Generate two chromosomes: An instruction chromosome and a time chromosome whose length is determined by the event points and time horizon. The elements of this time chromosome are deltas. These deltas are real valued and represent the duration for which a specific instruction is to be performed. Running the genetic algorithm evolves the chromosomes over time with a fitness function to converge to the optimal solution. Similarly to mathematical programming approaches, we consider the notion of the time horizon and event points. However, event points are handled slightly differently in what they represent. In the aforementioned models, the event points are real continuous values on the time domain at which a task may begin or end. In this framework, the time chromosome consisting of delta values is determined by the number of event points. Similarly, the instruction chromosome corresponds to an instruction set for any given delta value. For example, if 5 event points are selected for a time horizon of 12 h, then we generate five arbitary values which sum to the length of the time horizon, i.e: The instruction chromosome is one which maps a specific set of instructions for the batch plant for a given time delta. The length and composition of this chromosome depends on the batch plant framework it is being applied to. Integer coding is used to represent different tasks for different units. Specifically, a non-zero value indicates turning a unit on and its value which task is assigned to the unit. A negative value of the same integer implies a continuation of the same task in the same unit. We may think of each event point as a substring in which the instruction set is defined for that interval. The indices which determine the operation of each unit, i.e. The constraints specific to the batch plant being solved are contained within the fitness function of the solution. While infeasible instructions may be passed to the fitness function, it will evaluate the best obtainable objective value from the instruction chromosome while still adhering to the provided constraints. For example, if an instruction set states for a unit to be turned on when either the corresponding time delta is shorter than the minimum time of the unit or there is not enough intermediate or feed material, then the instruction is simply ignored and the fitness function awaits the next instruction subset. Essentially, the fitness function will only allow execution of a task if the proposed instructions are feasible. This allows for the representation of the problem (specifically the chromosomes) to remain of the same complexity and length while only the fitness function increases in complexity. Additionally, the search space is not inhibited by constraining particular elements in the chromosome, i.e. an element value may be infeasible in one particular chromosome but feasible in another. Ensuring that these values are not eliminated or constrained in any way, allows for potentially better solutions to be found at later generations. Should one wish increase the complexity of the constraints in the batch process, then these constraints need only be added to the fitness function. Importantly, this would not exponentially increase the evaluation time since infeasible branches are ignored. This is an attribute not always shared with its MILP counterparts. Alternatively, changes in the operational objectives, such as minimising makespan, are only required to be incorporated into the objective function. The algorithm works as follows. It will step iteratively through the length of the delta chromosome and implement the corresponding instruction set. These instruction sets control a volume vector ( We illustrate the above methodology through the use of the motivating example found in Continuing the explanation of The genetic algorithm constructed makes use of both crossover and mutation operations. We describe these operations on both chromosomes in the following detail. The algorithmic procedure of the GA is shown in Before running the genetic algorithm, the initial population is run through the fitness function and ranked accordingly. Beginning the algorithm, a selection of the best parents is chosen at each generation. This selection is controlled through the parameter, Consider Similarly to the instruction chromosome, the crossover applies in the same manner to the time delta chromosome except for the crossover point. The delta values are averaged across the two deltas at this index. Of course this change will imply that the sum of the deltas is no longer equal to the time horizon, thus all other deltas absorb the averaged difference required (positive or negative) to ensure that this is not violated. This is illustrated in Mutation takes place on a percentage of the children produced. This percentage is controlled by the parameter, The genetic algorithm performs its evolution over a predetermined number of generations. At each generation, a subset is chosen to remain within the population while the remaining population is culled. From this subset enough children are generated to keep the population at the designated population size. The population is re-ranked according to the fitness function and the procedure iteratively moves forward. As mentioned, the primary case study is that of the batch plant found in The instruction chromosome has a substring structure of length 4. One bit represents each unit. The still and heater are encoded with the integer range To demonstrate the performance capability of a metaheuristic approach, we list the results for the motivating and literature examples outlined in Sections For the motivating example, the SSN model by For the literature example, we consider cases ranging from 8 to 20 h in 2 h intervals. A cut-off time of 40 Currently the genetic algorithm is implemented in Of course the guarantee that the GA provides a local or global optimum cannot be claimed. However, when considering long time horizons for the MILP model the existence of a relative gap, albeit small, actually implies a significant difference in objective value. Thus claiming only a close-to-optimal solution. This is something that the proposed GA provides while also being substantially faster. With regard to the GA parameters, the GA responded most positively to population size and the value of With regard to this framework, the representation provides an easier to read and understand mechanism when building a specific model or analysing the results. With the GA this is not difficult as the resultant corrected chromosomes describe all start times and tasks conducted at all event points as much as necessary. From a practical point of view this has two key advantages. Firstly, numerous scenarios can be explored at once, allowing a plant to make a more informed decision before implementing a scheduling. This is especially useful in plants where decisions need to be made quickly. Secondly, the use and readability of this framework makes it much easier to understand the schedule as tasks and durations are clearly and unambiguously outlined. This paper introduces a novel scheduling framework along with a novel metaheuristic technique for multipurpose batch plants. The technique follows the same rules as outlined by its MILP counterparts but does not suffer mass enumeration under scaling time horizons. The solution technique involves a coupled chromosome genetic algorithm, one integer coded and one non-negative real valued. The proposed method does not suffer with increased granularity of the time horizon as shown in the results, especially on the medium to long time horizons. In almost all cases the GA outperformed the MILP implementation by The authors thank the