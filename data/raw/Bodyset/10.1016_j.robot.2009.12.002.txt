This paper proposes an online inverse-forward adaptive scheme with a KSOM based hint generator for solving the inverse kinematic problem of a redundant manipulator. In this approach, a feed-forward network such as a radial basis function (RBF) network is used to learn the forward kinematic map of the redundant manipulator. This network is inverted using an inverse-forward adaptive scheme until the network inversion solution guides the manipulator end-effector to reach a given target position with a specified accuracy. The positioning accuracy, attainable by a conventional network inversion scheme, depends on the approximation error present in the forward model. But, an accurate forward map would require a very large size of training data as well as network architecture. The proposed inverse-forward adaptive scheme effectively approximates the forward map around the joint angle vector provided by a hint generator. Thus the inverse kinematic solution obtained using the network inversion approach can take the end-effector to the target position within any arbitrary accuracy.
                  In order to satisfy the joint angle constraints, it is necessary to provide the network inversion algorithm with an initial hint for the joint angle vector. Since a redundant manipulator can reach a given target end-effector position through several joint angle vectors, it is desirable that the hint generator is capable of providing multiple hints. This problem has been addressed by using a Kohonen self organizing map based sub-clustering (KSOM-SC) network architecture. The redundancy resolution process involves selecting a suitable joint angle configuration based on different task related criteria.
                  The simulations and experiments are carried out on a 7 DOF PowerCube™ manipulator. It is shown that one can obtain a positioning accuracy of 1 mm without violating joint angle constraints even when the forward approximation error is as large as 4 cm. An obstacle avoidance problem has also been solved to demonstrate the redundancy resolution process with the proposed scheme.The inverse kinematic problem of a manipulator is a difficult problem in robotics which has attracted a lot of attention not only in the robotics community but also in the soft-computing research community. The main issue in solving these problems lies in the fact that they are highly nonlinear and there exist multiple solutions. In the case of a redundant manipulator, the number of inverse kinematic solutions may become infinite and closed form solutions are impossible to find in general. The methods available for solving these problems may be broadly grouped into two major classes— The classical techniques require previous knowledge of the manipulator geometry represented by the Jacobian matrix. Pseudo-inverse, Jacobian transpose, damped least square methods and their variants Among all the learning schemes, neural networks have been extensively used for solving the inverse kinematic problem. This includes Multiple Layer Perceptrons (MLP) In this paper we re-address the various limitations of a network inversion approach and provide alternate and simpler solutions to overcome these limitations. A radial basis function network is used to approximate the forward kinematic map between the manipulator joint angle vector and its end-effector position. The trained network is used to update the joint angle vector through network inversion so as to reduce the error between the current end-effector position and the desired target point in the workspace. This approach has following three limitations: The inverse kinematic solution obtained by the network inversion scheme depends on the approximation error present in the forward map. Hence one needs a large size of training data as well as a large network to reduce the forward approximation error. In order to satisfy the joint angle constraints of the manipulator, the network inversion algorithm must be initialized with a suitable hint In the case of a redundant manipulator, more than one joint angle vector is associated with each end-effector position. Thus, the hint generator should be capable of generating multiple hints. The network inversion around each hint will provide an appropriate inverse kinematic solution. This attribute is not present among the existing hint generators. The first problem is solved by using an In order to address the last two problems, a KSOM-based sub-clustering (KSOM-SC) network architecture In this paper, the initial joint angle value needed for the inversion algorithm is obtained from the KSOM-SC architecture. Since the KSOM-SC architecture provides multiple joint angle vectors for a given end-effector position, it is possible to select one out of many available configurations by using different criteria. Unlike conventional techniques, changing the redundancy resolution criterion does not require re-training of the network and hence this redundancy resolution scheme is far simpler than those existing in the current literature. Readers are referred to Finally, the proposed schemes are implemented on a 7 DOF PowerCube™ manipulator. The details of an obstacle avoidance experiment is presented to demonstrate the redundancy resolution capabilities of the proposed scheme. Note that only a 3-D positioning task is considered without taking into account the orientation of the end-effector. The paper is organized as follows. The RBF based network inversion scheme is presented in the next section. A review of KSOM-SC architecture is presented in Section In a conventional network inversion scheme, a feed-forward network is first trained to approximate the forward kinematic map of a manipulator and then this network is inverted to find the joint angle vector that takes the robot end-effector towards the target position. The network inversion algorithm updates the input (joint angle) vector so as to reduce the error between the network output and the desired end-effector position. The accuracy of the solution obtained from network inversion depends on the accuracy of the forward map. Because of the high nonlinearity present in the forward kinematic map, a large number of examples is needed for training the feed-forward network so as to obtain a low approximation error. One instance of forward training is shown in The schematic of the proposed method for solving the inverse kinematic problem of a redundant manipulator is shown in The forward kinematic map between the manipulator joint angle vector and its end-effector position is approximated using a RBF network. The input to the RBFN is the joint angle vector A KSOM-based sub-clustering (KSOM-SC) network is used to provide an initial guess ( For a given target position Using the gradient-descent rule, the update law for the joint angle vector may be written as The new end-effector position attained by the actual manipulator when driven by the joint angle vector An inverse module that updates the input vector so as to reduce the error between the network output A forward update module that modifies the weights of the network so as to reduce the error between its output and the actual end-effector position. This forward update can be considered as a fine tuning process to improve the accuracy of the forward map. Unlike conventional approaches which aim to learn the global solution through forward training, the proposed In the simulation section, it will be shown that this scheme achieves high positioning accuracy irrespective of the forward approximation error. The consequences of local learning will also be analyzed in detail in this section. Kohonen’s Self Organizing Maps (KSOM) The KSOM-SC network architecture is shown in As we know the number of inverse kinematic solutions available are not the same for all points in the workspace. This aspect is also captured by the KSOM-SC network. The distribution of the number of joint angle sub-clusters for different points in the manipulator workspace is shown in In this paper, the KSOM-SC network architecture is used as a hint generator for the   In Section The collision with an obstacle in the workspace can be avoided by the manipulator if some information about the obstacle can be embedded into the motion planning algorithm. This can be done by using either geometrical models In this section, we demonstrate a simplified obstacle avoidance scheme using the Among the solutions provided by the KSOM-SC architecture, all those solutions which do not satisfy this constraint are rejected and among the selected configurations the one which is nearest to the current robot configuration is selected as the initial value of joint angle vector for the network inversion scheme. The method proposed in this section is simpler as compared to the currently available methods because once the clustering has been carried out, the obstacle avoidance algorithm involves selecting the suitable joint angle vector using criterion The forward kinematic model of a 7 DOF PowerCube™ A 6-700-3 architecture is selected for the RBF network. Training data pairs It is seen in A 7×7×7 lattice structure is selected for the KSOM network. Nearly 50,000 input–output data pairs The efficacy of the proposed scheme is demonstrated by carrying out the following tasks: A target position The effect of forward training on inverse kinematic solution is shown in Even though only one criterion called “lazy arm motion” is used to obtain results shown in In If the forward map is trained properly then it is possible to find inverse kinematic solutions for all points within a reasonable amount of time. Due to improper forward training, some points take a greater number of steps to converge than others. If sufficient time (number of steps) is allowed, it is possible to get the desired accuracy for all points within the workspace of the manipulator. It should be noted that in The number of non-converging points also depends on the number of nodes used for the KSOM-SC lattice because it provides the initial guess for the inverse kinematic solution. If this initial guess is close to the desired position, a smaller number of steps is necessary for obtaining the solution. If this guess is quite far, the number of steps that is necessary to obtain the solution is large and the scheme may fail to converge within a reasonable amount of time. The proposed scheme has also been used to track the following trajectory: In this section, we answer the following question: The learning rate for the inversion algorithm The manipulator base is taken as the origin of the Cartesian reference frame. An obstacle of dimensions 20 cm×10 cm×20 cm is placed in the manipulator workspace with its center lying at (0 cm,35 cm,10 cm). The manipulator has to reach a target position specified by the coordinates Note that choosing the lazy arm criterion to find the initial robot’s configuration may not lead to collision-free trajectory in all cases. However, the intention here is to demonstrate the applicability of our approach to a practical problem. If the input–output space is effectively clustered using a KSOM-SC network, then it would be possible to obtain an initial guess which is fairly close to the desired position. Note that, we are talking about an accuracy of 1 mm to be obtained through our scheme. It is possible to get a positioning accuracy of about 1 cm by using the KSOM-SC architecture as shown in This experiment was performed at the ISRC, University of Ulster, Magee Campus in the United Kingdom. The objective of this experiment was to reach various points around an obstacle without colliding with it. A small cuboidal box of dimensions 21 cm×16 cm×6 cm was taken as the primary obstacle to be avoided. This box was placed over a wooden pedestal of dimensions 70 cm×50 cm×80 cm. The primary obstacle was modeled as a sphere of radius 14 cm and the pedestal was modeled as a sphere of radius 65 cm. In order to avoid configurations that would reach the point from the bottom, thereby colliding with the pedestal, the pedestal was also treated as an obstacle. The lazy arm criterion and obstacle avoidance criterion The PowerCube manipulator takes approximately 80 milliseconds to complete one positioning command. Hence, the multi-step inverse-forward scheme is implemented using the forward kinematic model and the final joint angle configuration is provided to the robot manipulator. An online inverse-forward adaptive scheme with a KSOM based hint generator is used to solve the inverse kinematic problem of a redundant manipulator. In this approach, a RBF network is trained to approximate the forward kinematic relationship and this network is inverted to obtain a joint angle vector for the desired target point. It is a well known fact that the positioning accuracy obtained by network inversion is limited by the approximation error present in the forward model. Usually a large amount of training data is needed for obtaining a small positioning error during forward training. The difficulty present in forward training can be gauged from the fact that a RBF network with 700 hidden nodes when trained with 7×10 Another drawback of the network inversion based algorithm is that it provides a feasible joint angle vector (that satisfies physical limits) only when, it is initialized with a suitable joint angle vector. Moreover, since a redundant manipulator can have multiple joint angle vectors for the same end-effector position, one needs to resolve redundancy as well. This initial condition determines the pose of the manipulator during the robot’s motion. These two problems are solved by obtaining a initial guess from a KSOM-SC network architecture. This network provides multiple hints for a given target end-effector position and each hint leads to a valid inverse kinematic solution. Redundancy resolution is carried out by selecting one out of several available configurations by using a task-specific criterion. An obstacle avoidance problem is solved to demonstrate the redundancy resolution process. The theoretical findings made in this paper are corroborated through experiments on an actual 7 DOF PowerCube™ manipulator. This work was supported by Intelligent Systems Research Center (ISRC), University of Ulster, UK.