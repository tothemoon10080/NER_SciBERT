Recirculation is prohibited in many coal mining countries because of the fear that the re-use of return air would allow the build-up of air contaminants at the workings. The incorrect design and location of a booster fan in any ventilation network can create unsafe condition due to recirculation. The current approach to investigating recirculation using simulation software requires manual effort which becomes tedious in a complex and a large network. An algorithm-based C++ program was designed to detect the recirculation in a booster fan ventilation networks. This program needed an input file prepared from output file generated by any ventilation simulator. This program created an output file for recirculation. This program demonstrated the strong capability to detect the recirculation in a sample network and a coal mine ventilation network. The outcomes of this program were documented in this paper.The main function of mine ventilation is to dilute and exhaust hurtful gasses, dusts, heat and humidity The ventilation simulation programs do not give much information about recirculation for the generated solution (fan pressures). The current approach to investigating recirculation using simulation software requires manual effort, i.e., traversing from node to node in the output network by the simulator while keeping tracks of all the nodes that form recirculation paths. This is an easy task in a simple ventilation network, but it becomes tedious and sometimes very confusing in a complex and large network. Moreover, the presence of multiple recirculation paths makes the manual effort more complex and difficult, especially in separating multiple loops that are connected together. Thus, there is a need for a more efficient program that will detect and quantify the recirculation efficiently, for the generated fan pressures. A program is developed to detect the recirculation(s) in a network. The detection of recirculation in any ventilation network is based on graph theory. Therefore, it is very important to walk through the basic concepts of a graph representation of any network. A graph is a collection of vertices and edges: vertices are simple objects that can have names and properties; an edge is a connection between two vertices In an attempt to implement algorithms to detect the recirculation in a ventilation networks, it is very important to understand the categorization of nodes. Nodes are classified as source, sink, and saddle nodes. A source node is defined that belongs to only outgoing branches. A sink node is defined that belongs to only incoming branches. A saddle node is defined that belongs to both outgoing and incoming branches. This algorithm was coded in C++ to detect the recirculation. Recirculation detection algorithm iteratively identifies source and sink nodes and deletes them. The remaining nodes known as saddle nodes show where recirculation may occur. This program was used to detect the recirculation, and minimize the need for manual effort. The resulting process was found efficient and fast. The recirculation detection algorithm consists of seven steps. Step 1: Prepare the adjacency matrix of [N] [N] for the sample network, where N represents the number of nodes in the network. Step 2: Identify the source and sink nodes and delete the columns and rows associated with these nodes. Step 3: Update and resize the matrix while preserving the original node numbers by applying a tracking node system. Step 4: Repeat steps 2 and 3, until all the source and sink nodes are deleted. Step 5: Check for the residual adjacency matrix. If it is a nonempty matrix, the network contains at least one recirculation cycle. A null matrix shows no recirculation. Step 6: Check for nontrivial, strongly connected nodes, identifying the multiple connected cycles that may allow recirculation. Step 7: Display the output list of recirculation cycles. Based on the above algorithms, a computer program was developed. This program was used to detect and flow recirculation paths in a sample and a coal mine ventilation networks. To this program, an input file is prepared based on branch results obtained by using a standard ventilation network solver (simulator). This input file consists of three columns for each branch: “from”, “to”, and “flow rate”. Flow rates may be positive or negative. For any branch with a negative flow, the nodes are swapped. This procedure is repeated for all the negative flows. The program prepares an adjacency matrix from an input file and generates an output file. To demonstrate the capabilities of the recirculation detection programs, a sample network was used. An input file was prepared for the sample network as discussed above based on the solution for this network. A quick evaluation of the output shows that the final residual matrix consists of five nodes, namely 7–8–9–10–12 and shows recirculation among them in a sample network. The output also shows that the matrix consists of single strongly connected components. These results were also validated from VnetPC results with manual effort to detect recirculation and were found identical results. A coal mine ventilation network used by Calizaya et al. was modified to create another circular path An input file was prepared for the coal mine ventilation network as discussed above based on the solution for this network. An algorithm based computer program written in C++ was implemented successfully to determine the recirculation in a sample and a coal mine ventilation network. The program detected single recirculation path along 7–8–9–10–12 in a sample network. The program also detected two recirculation paths along 8–7–10–11 and 12–16–26–20–19–21–25–17–13 respectively in a coal mine network. This program can be useful while determining the optimal solution for booster fan ventilation network. The authors would like to acknowledge the