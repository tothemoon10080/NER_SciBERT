Size-reduction systems have been extensively used in industry for many years. Nevertheless, reliable engineering tools to be used to predict the comminution of particles are scarce. Computational fluid dynamics (CFD)–discrete element model (DEM) numerical simulation may be used to predict such a complex phenomenon and therefore establish a proper design and optimization model for comminution systems. They may also be used to predict attrition in systems where particle attrition is significant. Therefore, empirical comminution functions (which are applicable for any attrition/comminution process), such as: strength distribution, selection, equivalence, breakage, and fatigue, have been integrated into the three-dimensional CFD–DEM simulation tool. The main drawback of such a design tool is the long computational time required owing to the large number of particles and the minute time-step required to maintain a steady solution while simulating the flow of particulate materials with very fine particles.
                  The present study developed several methods to accelerate CFD–DEM simulations: reducing the number of operations carried out at the single-particle level, constructing a DEM grid detached from the CFD grid enabling a no binary search, generating a sub-grid within the DEM grid to enable a no binary search for fine particles, and increasing the computational time-step and eliminating the finest particles in the simulation while still tracking their contribution to the process.
                  The total speedup of the simulation process without the elimination of the finest particles was a factor of about 17. The elimination of the finest particles gave additional speedup of a factor of at least 18. Therefore, the simulation of a grinding process can run at least 300 times faster than the conventional method in which a standard no binary search is employed and the smallest particles are tracked.Diameter (m) Coefficient of restitution Modulus of elasticity (Pa) Particle stiffness (N/m Mass (kg) Particle radius (m) Impact velocity (relative normal velocity) (m/s) Constant correcting the damping coefficient, Displacement (overlap) (m) Time-step (s) Particle damping coefficient, Poisson's ratio Density (kg/m Indexes Maximal Normal Particle Tangent Wall In computational fluid dynamics (CFD)–discrete element model (DEM) simulations, particle motion is dictated by particle–fluid interactions, particle–wall interactions, and particle–particle interactions. Hence, the calculation of the interactions between particles is expensive in terms of calculation time. The simulation can run faster when using a more efficient search algorithm and when the number of operations carried out in each time-step is reduced. Additionally, to maintain a stable numerical scheme, the time-step must be small enough to allow particle–particle interaction and particle–wall interaction to occur over the duration of several time-steps. This limit of the time-step is related to the size of the particles—the smaller the particles, the smaller the time-step. Grinding simulations thus require very small time-steps owing to the size of the fragments and the large number of particles resulting from constant feeding and grinding. To make simulation more feasible, the present work developed an efficient search algorithm, a method to increase the maximal allowed time-step, and a method of working around the generation of a large number of fine particles. The simplest search is a standard search with order O(N One way to reduce the search time is to employ “bookkeeping”. Each particle keeps a list of its neighboring particles and there is thus no need to scan the entire domain; only particles in the vicinity are considered. This method, called Verlet list, is efficient in cases where particles move with similar velocity ( Another way to reduce the search time is to divide the computational domain into cells (or smaller domains) and assign each particle to the cell that corresponds to the particle's position. Therefore, no computer resources are wasted in searching for contact between particles that have no chance of interaction. An example is the octree search ( The above methods are unstructured methods; that is, the lists or cells are constructed depending on the dynamics of the system. This makes them less efficient when the system is very dynamic, owing to frequent cell refinement or memory allocation. The no binary search (NBS) proposed by The NBS is the most suitable search for the present work as it is the fastest and does not require frequent cell/list generation. The advantages of the method and improvements made to the method in the present work are presented in the following section. As discussed above, to employ the NBS algorithm, a set of uniform cells (DEM cells) is generated by mapping the computational domain into a Cartesian DEM grid. The DEM grid is generated by dividing the width, length, and height of the computational domain into cubic uniform cells. Particles are assigned to a DEM cell according to their position by dividing the projected distance on each axis between the particle and the first node of the grid to the size of the DEM cell. This gives the indices that correspond to the DEM cell position in the three-dimensional array. Additionally, it is easy to add new empty DEM cells to the list. Some improvements were made to the search algorithm. The first and obvious improvement is that once contact is detected, the force acting between particles is stored by both particles. This means that once a particle has completed the calculation of the forces acting on it, it can move to its new position. There is no need to repeat the search for the second particle as the force has already been calculated for that interaction. This means that each particle in each cell has to check for interaction with particles in only 13 (3 At the top left (A) in the figure, the active particle is not close to any of the edges that may be scanned. The active particle scans only target particles within its own DEM cell. Once the active particle completes all the calculations needed, it moves to its new position (and is denoted in solid black) and the next particle in the DEM cell is called. At the top right (B), the new active particle is close to the top edge of the DEM cell, and target particles in the DEM cell above are thus scanned as well as particles within the active particle's own DEM cell. Again, the active particle moves to its new position once the calculations are completed. At the bottom left (C), the active particle is the last particle in the DEM cell and it thus has no particles in its own cell to scan; however, it is close to the edge on the right, and there are thus target particles in the neighboring DEM cell. At the bottom right (D), after all particles in the DEM cells have moved to their new positions, the following DEM cell is called and the search continues for the next active particle in the new DEM cell. In the case of uniformly dispersed particles, each DEM cell should hold a small number of particles. However, a problem may occur if a uniform cell size is used in the case of particles dispersed densely in some regions and sparsely in other regions. A grid composed of cells that are too large will result in a large computational effort in dense regions and a grid composed of DEM cells that are too small will have a high computational cost because of the many empty cells. To resolve this problem, a hashed DEM grid was developed for the simulation ( As mentioned earlier, simulating processes with a wide particle size distribution (e.g., the particle size distribution in milling) are problematic (Particles are fed at sizes in the range of 10 To illustrate the significance of this sub-cell generation, a domain with a wide particle size distribution is illustrated in  The above sections discussed the means of reducing the computational effort using an efficient search algorithm. However, as efficient as this algorithm may be, the simulation still has an enormous calculation cost as there are many particles in the system. Therefore, steps must also be taken to reduce the computational effort at the level of the single particle. Significant improvement can be achieved by reducing the calculation cost for each particle at each time-step and using as large a time-step as possible. The first and most common way to reduce the simulation time in DEM–CFD simulations is to let the CFD time-step be larger than the DEM time-step. This is a common practice in CFD–DEM simulations. However, extensive communication takes place while transferring flow properties between the CFD and DEM solvers. Therefore, several ways to reduce the communication time required in considering fluid–particle interactions were examined in this study. One way of reducing the calculation cost per particle is to use the mean fluid properties within the DEM cells discussed above. By holding the mean fluid properties at the DEM cell level, the particles have no need to interact with the CFD solver during each DEM time-step; instead, the interaction between the DEM and CFD is calculated at the beginning and the end of the DEM part of the simulation (i.e., once every CFD time-step), while the particles are retrieving the fluid properties from the DEM cell. The above procedure saves much computational time since the communication between the CFD solver and DEM solver is very time consuming. Another way to reduce the calculation time for particle–fluid interactions is to calculate the drag and lift forces acting on the particle only if there is a significant change in the relative velocity between the particle and fluid. Owing to the small time-step needed for stable particle–wall and particle–particle interaction, stability is easily maintained for the particle–fluid interaction. Therefore, instead of using the formulation for calculating the drag and lift (see In DEM simulations, it is customary to calculate the equivalent collision parameters for particles of different size as a variation on series connection of the particle properties ( This summation is presented in  However, the mean-property model does not predict the same damper coefficient as would be expected for particles of the same size. This can be seen in To maintain a stable solution, the computational time-step is reduced as the particles become smaller. The condition for stability was deduced by In the present work, we propose a simple model that artificially reduces the stiffness of the smallest particles (which have the smallest resistance to drag). By artificially reducing the stiffness, the maximum allowed time-step is increased without greatly affecting the behavior of the system. This modification will distort slightly the duration of the collision time and the penetration of a particle into the wall or other particle. However, this modification is reasonable for as long as the flow is drag driven and not collision driven. The new parameter for the particles’ decreased modulus of elasticity can be calculated from Eq. As a precaution in the event of too great penetration, the particle's normal velocity is set to the expected rebound velocity. This is done by multiplying the velocity at the point of the too great penetration by the coefficient of restitution and reversing its direction: The maximal displacement-to-diameter ratio ( After derivation of the analytical solution for the maximal displacement, several thousands of numerical experiments were conducted to obtain an empirical expression for the maximal displacement with the dashpot. Since we know the maximal displacement is a maximum for a coefficient of restitution When particles break, a considerable number of ultra-fine particles are generated. The time-step that corresponds to these particles is very small and makes the calculation time unreasonable. Additionally, the computational effort due to the large number of these particles makes the calculation of their motion unfeasible. Keeping in mind that drag acting on these particles is far stronger than any other force acting on the particles (with the exception of attracting forces), we decided to treat these ultra-fine particles as dust particles. Dust particles are not simulated upon creation; instead, we assume that they exit the mill immediately and are stored in a table. In the table, the dust is sorted into several size fractions, enabling the analysis of the actual size distribution at the outlet. It is worth noting that this procedure makes the simulation feasible, but slightly reduces the ability of the simulation to predict agglomeration and caking. Nevertheless, running the simulation without this procedure results in a simulation time that is unrealistically long. Several threshold diameters (where fragments smaller than the threshold diameter are treated as dust) were tested. The resulting size distributions of both dust particles and physical particles at the outlet of a jet mill were compared with the experimental predictions in the same manner discussed by It is important to note that when holding data for dust particles in the range of 1–10 This work presented methods for speeding up simulation of processes with a wide particle size distribution. A DEM grid was constructed to speed up the simulation. The DEM cells within the DEM grid are linked and hashed, making the simulation run much faster as the empty cells are skipped over in the simulation. Using the DEM cells, the CFD and DEM solvers could communicate in a fast and easy manner. It was found that by carrying out an NBS in the hashed DEM cell for particles of similar size, near linear search behavior is expected and the contact search algorithm is much faster. When comminution functions were used, the wide size distribution and the large number of particles slowed the simulation rapidly. To reduce the numerical burden due to the wide size distribution, a sub-DEM grid was added to the search algorithm. The sub-DEM grid was found to be most efficient at one-fifth the scale of the 0.5-mm DEM cell, in which case the simulations were accelerated by a factor of about 3–5. Owing to the limitations of the DEM when working with small particles, a new approach was developed to improve stability. In this approach, the stiffness of the smallest particles in the simulations was reduced, making the particles softer and therefore allowing the maximal time-step to be increased. To find the limitations of this method (i.e., maximal penetration of 15%), an expression for the maximal penetration when using the Hertz–Mindlin contact model was developed. The new expression depends only on particle properties and enables the prediction of the maximal force acting on the particle. Using this expression, a new particle–particle selection function was developed. The reduced-stiffness approach allowed the simulation to run about three times as fast. However, this was not sufficient, and additional speedup was achieved by eliminating the finest particles in the simulations. This was done by choosing a threshold diameter from which downwards particles are considered as dust and are no longer simulated. Obviously, these dust particles are of interest in grinding simulations, and the size distribution of the dust is thus stored in the simulation for further analysis. Unfortunately, the dust particles are the particles most likely to agglomerate or cake; however, running the simulations with a large number of smaller particles was found to be too time consuming. Nevertheless, the simulation was found to produce reasonable results.