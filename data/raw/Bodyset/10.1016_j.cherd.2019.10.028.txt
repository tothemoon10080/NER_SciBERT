Flotation with microbubbles is one of the most viable methods for separating oil from water. Microbubbles are formed by the injection of a small air flow through a pressurized liquid flow. In the present study, a microbubble generation and measurement unit (MBGMU) was constructed to measure mean microbubble size through the liquid flow and airflow of the system. The liquid flow rate was measured by a Hall effect-type sensor, whereas it was necessary to construct a sensor for bubbles immersed in glycerin for the determination of the airflow rate. This sensor was used to determine the minimum and maximum airflow limits, and the airflow measurements were compared with pressure gauge readings to establish a calibration curve. The Arduino UNO R3® board was the microcontroller of the MBGMU for the determination of the liquid flow rate. A coupled system involving a GoPro® Hero 6 camera and microscope lenses was assembled to capture images of the microbubbles. The airflow rate ranged from 0.001 to 10,000l/h, and a high linear regression coefficient was found (98%) for the calibration between airflow and the variation in pressure. Images of microbubbles in motion were captured for future analyses. This innovative device is a promising system to be applied in industrial processes for the control of microbubbles produced in flotation systems.Treatment systems for oily effluents involve mixture separation equipment, such as decanters, centrifuges, hydrocyclones, and flotation devices ( The air flotation systems show different configurations, as electroflotation, induced air flotation, dissolved air flotation, column flotation, among others, which depend on the available equipment’s and on the microbubble production necessity ( The dissolved air flotation (DAF) shows the advantages of compressors absence, no centrifugal pumps utilization, and no pressure reducing valves to produce microbubbles from 20 to 100 One of the essential variables to oil removal using the DAF is the size distribution of the microbubbles, which varies depending on the input airflow rate, input liquid flow rate, hydrogen potential (pH), concentration of collectors agents, and temperature ( Arduino UNO R3® is a microcontroller that enables the low-cost construction of prototypes and equipment with a broad availability of sensors. The C/C++ free software language of Arduino is based on four steps: (1) the declaration of variables; (2) the construction of a standard operating mode (void setup); (3) the determination of a routine (void loop); and (4) the inclusion of a new desired function ( An efficient oil removal method with the use of small, evenly distributed microbubbles, in a low-cost operation, is a potential option for thermoelectrical plants, which generate a large amount of oily wastewater that needs to be treated ( Thus, the aims of the present study were to construct the microbubble generation and measurement unit (MBGMU), and provide operational data for the measurement of extremely low airflow rates in the system. The construction of the MBGMU consisted of three steps: (1) hydraulics and measurement of airflow rate; (2) electronics and programming; and (3) measurement of microbubble size. Step 1 consisted of designing the MBGMU framework in which the combined flow rates (water and air) enable the formation of microbubbles in particular operational ranges. Abrupt changes in the process could cause an irregular microbubble flow rate, making the measurement process less precise. This step can be subdivided into the hydraulic and airflow measurement sub-steps. The following components were used for the hydraulic sub-step: Bourdon pressure gauge ranging from 0 to 100 In the airflow measurement sub-step, the acquisition of a specific sensor to measure a small airflow rate would be costly. Thus, a sensor was constructed using two retention valves, a 25-mm acrylic tube, transparent hose, 100-cm metric tape, closed compartment for water, 100 The small airflow (“B1”) begins from an external medium and through a retention valve, passes through an acrylic tube with glycerin and is manually controlled by two needle valves until reaching a second retention valve. At this point, the airflow is united with the liquid flow (“A”) to form flow “C”, which is sent to the microbubble generation system. Glycerin was used because it is a transparent liquid at 20 The video recording outside the acrylic tube requires some parameters for the correction of the value of the bubble to avoid the phenomenon of refringence. A diopter is a system with two phases with different refringences (two separate permittivities for the passage of light). To measure the correct volume of air per unit of time, a test object was inserted in the airflow meter to evaluate the corrective parameter. Based on the real diameter of the acrylic tube (D The correction parameter [refringence parameter (α)] was used to convert the image magnified by the glycerin, whereas the photo/real conversion parameter (θ) was employed to convert each amplification of the video images to the real size. The definition of α enabled measuring the airflow limits by the minimum and maximum manual adjustments of the needle valve, with video recording of six experiments, each lasting 30 The defined airflow limits enabled comparing the airflow rate (l/h) with the variation in pressure (cmH Parallel to the hydraulic and airflow measurement sub-steps, an electrical system was designed with the Fritzing software program to plan the electrical installation of the MBGMU and facilitate the operation ( The electrical circuit had the following components: an Arduino UNO R3® board; 220-V line filter; 12-V source; 5-V source; four LED stripes; YF-S201b liquid flow sensor for the hydraulic system; 1-HP centrifuge pump for the hydraulic system; 16 After the measurement of the input variables, a method was needed to visualize the microbubbles in motion. For such, a GoPro® Hero 6 camera was fitted with two microscope lenses (one ocular and one objective) and parts taken from a Sethi3D S3® printer. Perpendicular to the camera, a 200-lumen submergible flashlight with rechargeable batteries was also used to maintain a high luminosity level and enable better visualization of the microbubbles, as shown in the schematic in The following were the camera parameters: capture mode with a rate of 30 photos each 6 The counts were performed manually on the images using Microsoft Office® Power Point® due to the difficulty in finding a software program that performed the automatic recognition of microbubbles in water. This process made the counting slower. In each image, the microbubbles were compared to the diameter of the objective lens (4.21 A six-step method was used to measure the microbubbles and facilitate future microbubble readings: Two of the 30 photographs are selected for each assay; With the aid of Microsoft Office® Power Point®, two straight lines (vertical and horizontal) are traced on each photograph, dividing the image into four quadrants; A maximum of 15 microbubbles is stipulated in each quadrant, prioritizing more spherical and visible bubbles. Thus, the four quadrants of each photograph totaled a maximum of 120 microbubbles, with the degree of freedom tabulated on the one-tail probability of the Student’s t table; Each microbubble is marked horizontally and its size in pixels is converted to centimeters using the computational tool; With the mean size of the vertical and horizontal lines, the real size of the lens (4.21 With the different microbubble diameters in each assay, the Sauter diameter (d The construction of the prototype and development of the operational parameters and measurement method were the objectives of the present study. The microbubble measurements with experimental planning will be the object of a future study, which is already underway.  The first two steps consisted of the concomitant input of liquid (flow “A”) measured by the YF-S201b sensor (“FI 1”, expressed as l/h) and input of air (flow “B1”) measured by the sensor developed for small flow rates (“FI 2”, expressed as l/h). Parallel to the airflow, a pressure sensor (“PI 2”, expressed as cmH The third step was the mixture of the fluid and air (flow “C”) and the transformation of the mixture into microbubbles, presenting a Bourdon pressure gauge (“PI 1”, expressed as kgf/cm  For the measurement of airflow, the images resulted in values of 1.40 and 1.73 for the photo/real conversion parameter (θ) and refringence parameter (α), respectively. The airflow limits and uniformity are shown in Based on the limit values, a relationship was established between airflow (l/h) and the variation in pressure (cmH The MBGMU had a differential circuit assembled with an Arduino UNO R3® board, a control panel (on/off switch, pump switch, LEDs and LCD light) and a potentiometer to regulate the LCD characters ( The GoPro® Hero 6 camera system with parts from the Sethi3D S3® printer and microscope lenses is shown in The operating MBGMU was used to capture microbubbles in motion for subsequent measurement without the use of chemical additives, such as tensioactive agents, and without altering the pH (  The construction of the microbubble generation and measurement unit constitutes an innovation integrating hydraulic equipment, a meter for small airflow rates, a central control panel with an Arduino UNO R3® plate, the assembly of an image capturing system (GoPro® Hero 6 camera, parts from a Sethi 3D S3® printer and microscope lenses) and a microbubble measurement method. In other words, the advantage of the device is that it was constructed with an open source controller, with a simple and accurate air flow measurement system, and with a bubble size measurement system that joined the technologies of a GoPro camera, 3D printer parts, and microscope lenses. The stability of the airflow measurements is demonstrated by the determination of the minimum and maximum rates (0.001 and 10.000 Future studies will be conducted using factorial planning, such as a central composite rotatable design with four variables (liquid flow, airflow, pH, and concentration of surfactant or biosurfactant), to achieve the smallest possible microbubble diameter and consequently increase the contact surface between the microbubbles and oil droplets. The optimization of the variables could enable the MBGMU to be installed in industrial processes for the control of microbubbles produced in flotation systems. This study was conducted with financial support from the research project between the The Arduino code was made in four steps: Variables declaration: #include <LiquidCrystal.h> // Code for Liquid Cristal Display (LCD). float flow; // Measure the flow in l/h. int countPulse; // Measure the spin of the flow sensor. int pump int LEDs LiquidCrystal lcd(8, 7, 6, 5, 4, 3); // // Define the digital pins to the LCD: 3, 4, 5, 6, 7, and 8. Standard operating mode: void setup() // Boot Execution. pinMode(2, INPUT); // Determination of pin 2 as digital input of flow sensor data. pinMode(pump,OUTPUT); // Determination of the pump as signal output. pinMode(LEDs,OUTPUT); // Determination of LEDs as signal output. digitalWrite(pump,LOW); // Activate pump, but physical activation is necessary by pressing button. digitalWrite(LEDs,LOW); // Activate LEDs, but physical activation is necessary by pressing button. lcd.begin(16, 2); // LCD Inicialization. lcd.setCursor(4, 0); // Placement of the LCD cursor in the fourth column and in the first line. lcd.print(“Welcome,”); // Writing text on LCD. lcd.setCursor(4, 1); // Placement of the LCD cursor in the fourth column and in the second line. lcd.print(“Pedro!”); // Writing text on LCD. delay(3000); // Wait 3 lcd.clear(); // Cleaning the LCD screen. attachInterrupt(0, incpulse, RISING); // Interrupt function to zero the flow sensor. Loop mode: void loop() // Loop of the Arduino. countPulse sei(); // Enables interrupt. delay (1000); // Wait 1 cli(); // Disable interruption. // Flow Sensor flow lcd.setCursor(5, 0); // Placing the LCD cursor in the fifth column and the first line. lcd.print(“Flow”); // Writes the text on the LCD. lcd.setCursor(3,1); // Placing the LCD cursor on the third column and on the second line. lcd.print(flow); // Write on the LCD the value of the water flow. lcd.print(“l/h”); // Write the text on the LCD. delay (1000); // Wait 1 New function: void incpulse () // Pulse increment function. countPulse ++; // Increase the pulse variable.