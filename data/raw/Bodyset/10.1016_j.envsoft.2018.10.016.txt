WDSLib is an extensible simulation toolkit for the steady-state analysis of a water distribution system. It includes a range of solution methods: the forest-core partitioning algorithm, the global gradient algorithm, the reformulated co-tree flows method, and also combinations of these methods. WDSLib has been created using a modularized object-oriented design and implemented in the C++ programming language, and has been validated against a reference MATLAB implementation. WDSLib has been designed: (i) to avoid unnecessary computations by hoisting each of the modules to its appropriate level of repetition, (ii) to perform the computations independently of measurement units using scaled variables, (iii) to accurately report the execution time of all the modules in that it is possible to produce a timing model to parameterize multiple simulation times (such as in an optimization using a genetic algorithm) from a series of sampling simulation runs and (iv) to guard against numerical failures. Two example applications, a once-off simulation and a network optimization design application simulation, are presented. This toolkit can be used (i) to implement, test and compare different solution methods, (ii) to focus the research on the most time-consuming parts of a solution method and (iii) to guide the choice of solution method when multiple simulation runs are required.WDSLib 1.0  C++ Windows, MacOS, Linux, Unix 2018 Hydraulic simulation has been used to model water distribution systems (WDSs) for several decades and is an essential tool for the design, operation, and management of WDSs in industry and research. Hydraulic simulation allows users (1) to optimize WDS network parameters, such as pipe diameters, in a design setting, (2) to calibrate network parameters, such as demand patterns, in a conventional operational setting, (3) to conduct real-time monitoring and calibration of the network elements in a supervisory control and data acquisition (SCADA) operational setting, and (4) to adjust control devices, such as valves, in a management setting. In the design setting and both the above operational settings, repeated hydraulic assessment is required on a network with fixed topology. In the management setting, repeated hydraulic assessment is required on a network with flexible network parameter settings. With ever-increasing network sizes and the need for real-time management using a SCADA system, it is important to have a robust simulation package which can be configured to be maximally efficient whatever the setting. In the field of hydraulic simulation, the system of equations can be formulated as a large and sparse non-linear saddle point problem. Saddle point problems are defined to be a function of two variables (say f(q,h)) and the objective is to find a pair of variables (q*,h*) such that the value f(q*,h*) is minimized with respect to the first variable and maximized with respect to the second variable or equivalently, This work describes an extensible WDS simulation platform called WDSLib. WDSLib is a numerically robust, efficient and accurate C++ library that implements many WDS simulation methods. WDSLib is written using a modular object-oriented design which allows users to easily mix and interchange solution components, thereby enabling users to avoid redundant computations. It has been optimized to use sparse data structures which are oriented to the pattern of access required for each solution method. WDSLib has been validated for accuracy on a range of realistic benchmark water distribution networks against reference implementations and tested for speed. The program accepts the input file formats of the industry standard EPANET2 ( The remainder of this paper is structured as follows. The next section describes related methodologies and implementations. Section This section describes related water distribution system network solution methods and implementations. The first subsection describes solution methods, including those used by WDSLib. This is followed by a description of currently available implementations and compares these with WDSLib. This research considers a water distribution model made up of energy conservation equations and the demand driven model continuity equations. The Hardy Cross method ( The GGA is a range space method that solves for both flows and heads. It was the first algorithm, in the field of hydraulics, to exploit the block structure of the Jacobian matrix to reduce the size of the key matrix in the linearization of the Newton method. The GGA has gained popularity through its rapid convergence rate for a wide range of starting values. This is the result of using the Newton method on an optimizations problem that has a quadratic surface. However, it was reported by The GGA as it was first proposed, applied only for the WDSs in which the head loss is modelled by the Hazen-Williams formula, where the resistance factor was independent of flow. The co-trees flow method (CTM) (  The forest-core partitioning algorithm (FCPA) ( The graph matrix partitioning algorithm (GMPA) ( EPANET 2 ( The EPANET 2 implementation is not explicitly designed to necessarily be easy to understand or accommodate alternative solution methods ( Consequently, it is difficult to cleanly incorporate new solution methods into EPANET 2 in a manner that allows a fair comparison of performance between these methods. Moreover, because there are no clearly defined interfaces for the incorporation of third-party code components in EPANET 2, there is no guarantee that independently authored extensions will be easy to combine with each other. In the absence of a popular easy-to-modify WDS simulation platform there is currently no straightforward means for comparing different solution methods. To date, when new solution methods have been developed they have been compared using different research systems, on different platforms with different implementation languages. This leads to difficulty in comparing methods, limits the reusability of code, and creates a barrier for researchers to reproduce and replicate results. To address these issues, an extensible framework is required that allows implementation of new methodologies to be easily incorporated without an adverse impact on the performance of the rest of the system. To this end, a number of attempts have been made to implement an object-oriented wrapper to encapsulate the EPANET 2 solver (openNet ( To accommodate the deficiencies referred to above, this paper presents a new hydraulic simulation toolkit WDSlib. WDSlib is coded in C++, and incorporates a number of recently published techniques. This toolkit offers users the ability to: (i) choose from, or modify, different approaches and implementations of different WDS model analyses, and (ii) extend the toolkit to include new developments. These features have been implemented using fast and modularized code. A focus of attention in this research has been program correctness, robustness and code efficiency. The correctness of the toolkit has been validated against a reference MATLAB implementation. The differences between all results (intermediate and final) produced by the C++ toolkit and the MATLAB implementation were shown to be smaller than This section describes the general WDS demand-driven steady-state problem. The following starts with the basic definitions and notation, followed by the system equations. Finally, the relevant equations are shown for each of the different solution methods that are implemented in WDSLib. All variables are described in the nomenclature section in Consider a water distribution system that contains Let The head loss exponent The steady-state flows and heads in the WDS system are modelled by the demand-driven model (DDM) continuity equation This non-linear system is normally solved by the Newton method, in which  Later, Simpson and Elhay (2010) proposed It is important to note that the GGA, as it was originally proposed, solves the entire network by a non-linear solver, and this can include some unnecessary computations which can be avoided by exploiting the structural properties of the WDS graph composition. The methods described below exploit these structural properties to potentially improve the speed of the solution process. Associated with a WDS is a graph The flows of the pipes in the forest, Finally, once the iterative solution process for the core has stopped, the forest heads can be found by solving a linear system: A graph, with or without forest, can be partitioned into two sub-graphs: a spanning tree subgraph and a complementary co-tree subgraph. The reformulated co-tree flows method (RCTM) ( By exploiting the relationship between the spanning tree and cotree, Note that in Eq. The heads are found after the iterative process of the RCTM has been completed by using a linear solution process: This partitioning of the network equations reduces the size of the non-linear component of the solver to WDSLib is a WDS simulation toolkit consisting of a set of C++ member functions, which henceforth will be referred to just as Individual functions in WDSLib are classified according to their role in the simulation workflow. In any simulation workflow, there will be functions that will only have to be executed once. For example, functions to read the input file or partition the network will only have to execute once at the start of the simulation (or of all simulations). Likewise, code to reverse the network partitioning and write simulation results will only have to execute once at the end of the simulation. In this work, these functions that are only required to be run once are called level one ( Finally, for every hydraulic assessment there is a non-linear iterative phase in the solution process. The functions in this phase run many times for each hydraulic assessment until the stopping test has been satisfied. Examples of these include the functions to calculate the    Each class in WDSLib has various methods available for setting the network parameters and retrieving the results of the WDS network. These methods allow the user to reconfigure the network before and during simulation runs. The names of the setter methods all start with a prefix This section outlines key implementation details of WDSLib. As previously mentioned, the overall aim of WDSLib is to provide a clearly-structured, flexible and extensible hydraulic simulation toolkit that allows testing, evaluation, and use, in production settings, of both existing and new WDS solution techniques. These aims require WDSLib be implemented so that it is fast to execute, flexible to configure, robust to challenging input data cases, and easy to understand and modify. The following describes aspects of the implementation of WDSLib that enable it to meet these requirements. The next subsection describes the general considerations that informed the design of the whole toolkit. This general discussion is followed by a summary of key improvements to the solution processes encoded in forest searching and spanning tree searching in the WDSLib package. This sub-section describes design aspects underpinning the utility and performance of WDSLib. In-turn, the following outlines measures taken to: (1) maximize code clarity and modularity; (2) increase the efficiency of memory access and storage; (3) maximize numerical robustness; (4) facilitate accurate timing of code execution; and (5) maximize simulation speed for different settings. The modular design of WDSLib is central to the evaluation and testing of different WDS solution methods. All methods have been defined to perform a single, well–defined, function and each class can be compiled, used and tested independently. These features allow users to assemble the methods of interest from independently developed components to create a customized WDS solution method in a reliable way. WDSLib's modular design also allows the users to profile the computation time of each individual component of an algorithm. Functions communicate through well-defined interfaces and the function code has been factored to minimize development and testing cost. This architecture allows customized simulation applications (i) to combine the functions of interest and (ii) to implement new solution algorithms to extend the functionalities of WDSLib. Care was taken to minimize the memory footprint of executing code (in order to reduce memory requirements and prevent memory leaks) in the interest of the toolkit efficiency and toolkit robustness. Reducing memory requirements allows the solution of larger WDS problems for a given memory capacity. In WDSLib, memory reduction was achieved through both, using sparse matrix representations and the systematic allocation and deallocation of working structures in the C++ code. The matrices used in WDS simulation are often sparse, with the density of the full node-arc incidence matrix being only 2/ Other implementations use a variety of storage schemes. In EPANET 2, the Both CCS and CRS are used in the FCPA implementation reported in In WDSLib, a modified adjacency list, described in The adjacency list is modified to include a directed and weighted graph for WDSLib. This modified adjacency list for a directed and weighted WDS graph consists of In addition to these optimized encodings, both As a final note, to offer further assurance of the correctness of memory management in WDSLib, Valgrind ( The calculations in WDSLib are performed in C++ under IEEE-standard double precision floating point arithmetic with machine epsilon In the construction of any numerical solver, there are two primary dangers that are associated with floating point arithmetic that cannot be ignored: (i) subtractive cancellation and (ii) overflow and underflow. To avoid problems associated with these, all input variables are scaled to a similar range to minimize the risk of avoidable computational inaccuracy or failure in floating point arithmetic. It is important to note that unscaled or poorly scaled variables can unnecessarily confound a computation. These scaled input variables are physically dimensionless, which allows computation which is independent of the system of measurement units. The variables, that are provided in EPANET input file for the package, and their corresponding units in US customary and SI units are shown in To help ensure that WDSLib solution methods are both fast and reliable. The sparse matrix operations are implemented using SuiteSparse ( When executing WDSLib, each function reports the time spent in it by sampling wall clock time at the start and end of its execution. Although the overhead for sampling wall clock time is small, there are at least two special considerations involved in the interpretation of these timings: (i) the operating system, at its own discretion, may launch background processes (for example anti-virus software), which will distort the timings and (ii) extrapolating the timing for multiple hydraulic simulations from a single analysis (as may be required, for example, in a genetic algorithm or other evolutionary algorithm run) must be done with care because the relationship between the different settings is not linear. This concludes the discussion of the main considerations concerning the global design of WDSLib. In the following, key details of the implementation of selected parts of the solution processes are described. The WDSLib implementation makes several improvements to extant solution processes. This section focuses on the improvement of the network partitioning processes in FCPA and RCTM. The forest-core partitioning algorithm (FCPA) in this paper is a substantial improvement over the algorithm of the original paper ( The pseudo-code for this refined forest search algorithm is shown in The reformulated co-tree flows method (RCTM) in this paper is also a substantial improvement over the algorithm of the original paper ( The pseudo-code for the refined spanning tree/forest search algorithm is shown in WDSLib consists of a collection of functions which can be used either as a standalone application for fast one-off simulations or as a library of software components that can be integrated into a user's own WDS solution processes. This section presents two example applications. The first application is the setup for a basic one-off simulation of a WDS. The second application (described in The setup for WDSLib as a standalone application is straightforward. The user provides a configuration text file that specifies input and output filenames; the name of the solver; the desired output variables; and simulation parameters. These values have sensible defaults so the user can set up the solver by using a minimal configuration such as that shown in The full set of configuration parameters for once off simulations is shown in Fig. 11 in As a minimalist example of the application of WDSLib to a WDS network design problem, the following example uses 1+1 EA for optimally sizing pipe diameters. This algorithm takes an existing network with randomly generated pipe diameters and optimizes the network to minimize cost, subject to given pressure head constraints. A 1+1 EA is a very simple evolutionary strategy ( The C++ code for this example is shown in g++ simpEA.cc -o simpEA -Llib -lWDSLib To run this code the user would type: ./simpEA config.txt. where config.txt contains the same configuration text as for the previous example. Starting with the main function in It should be noted that the algorithm described above can be used to design a simple WDS but is not optimal in terms of speed of convergence. Other EA's such as genetic algorithms ( This concludes the presentation of examples in this work. The next section presents a case study that illustrates the performance of WDSLib in a multi-simulation setting. The following presents timing results for WDSLib running the 1+1 EA described in the previous section. The results below compare the four different solvers plus EPANET2. Note, that detailed timings for once-off simulations comparing the four methods can be found in  The results show that the EA runs using WDSLib are substantially faster than the runs using the EPANET2 solver. This is, in part, due to the fact that the EPANET2 solver is designed as a standalone solver which does not facilitate lifting out of invariant computations from the EA loop. As a demonstration of how the performance of an EA can be traced This paper has described WDSLib, a library for steady-state hydraulic simulation of WDS networks. WDSLib is fast, modular, and portable with implementation of several standard and recently published hydraulic solution methods. We have outlined the supported solution methodologies, the structure of the package and key aspects of WDSLib's implementation. Two example applications have been presented including a design case study using a simple EA. The EA results were benchmarked for different solvers demonstrating a substantial improvement in speed over the industry standard EPANET2 package. These benchmarks also have illustrated how the modular structure of WDSLib could be exploited to speed up execution time in a design setting. As well as providing a fast simulation platform for both once-off and multi-run simulations, WDSLib also provides a testbed for comparing different solution methods in different settings and network topologies. As such WDSLib is designed with a pluggable architecture which can extended to efficiently incorporate new solution methods as they are created. This will enhance the capability of the research community to demonstrate the efficacy of new methods without having to re-engineer the content of shared WDSLib functions and data representations. WDSLib accepts the input file format used by EPANET2 which allows for simple deployment. The amount of coding required to use the provided solvers in WDSLib is minimized by the use of a simple and extensible configuration file. WDSLib is currently limited to finding solutions of demand-driven WDS systems without control devices. The development of software components to simulate control devices and pressure driven models is future work. In WDSlib, all input variables are scaled to a similar range to minimize the risk of avoidable computational inaccuracy or failures in floating point arithmetic. The variables are scaled as following: By substituting Eq. Finally, the network can be solved by using Eq. The choice of the scaling factor, despite much research, is not well understood. In this subsection, a choice for each scaling factor, based on the experience of the authors, is recommended. There are two types of variables and parameters that need to be scaled: invariants and variants. Data sets that have very wide range of values can confound numerical accuracy. As a result, it may be preferable to scale the data to a narrower range. The default scaling factor for each of the input data is chosen to be its maximum absolute value. For example, the scaling factor for demand is max( In contrast, it is more difficult to choose a scaling factor a priori for values that vary between iterations (variants). This is because the range of variants can change as the iteration progresses. As a result, the intermediate and the final results might not be within the same range as the initial guesses. There are two variants that need to be scaled: During the process of the computation, the matrices In order to make sure the Reynolds number, a dimensionless variable, is not affected by scaling, In order to make sure Finally, diagonal elements of For the Hazen-Williams head loss model, the diagonal elements of the matrix Case 1 from Running this example network from EPANET and WDSLib, we get the following results: The energy residual and the continuity residual of the EPANET result are 2.6973 and In contrast, the energy residual and the continuity residual of the WDSLib result are  Forest Search Algorithm  Spanning Tree Search Algorithm   Co-tree Co-tree pipes Darcy-Weisbach head loss formula Forest-core partitioning algorithm Global gradient algorithm Hazen-William head loss formula Water distribution system Reformulated co-tree flows method Number of non-zeros Spanning tree pipes Spanning tree nodes Spanning tree  Gravitational acceleration constant Kinematic viscosity of water  Permutation matrix for the nodes in the core, Set of core pipes (edges) in Set of forest pipes (edges) in Core subgraph Forest subgraph Permutation matrix for the pipes in the core, Permutation matrix for the pipes in the forest, Permutation matrix for the nodes in the forest, Set of core nodes (vertices) in Set of forest nodes (vertices) in  Unknown-head node-arc incidence matrix Fixed-head node-arc incidence matrix Vector of nodal demands Demand of node Vector of pipe diameters Diameter of pipe Vector of Fixed-head nodes elevation heads Fixed-head nodes elevation heads at node Set of pipes in graph Vector of end nodes End nodes of pipe Vector of Darcy-Weisbach friction factors Darcy-Weisbach friction factor of pipe Diagonal Matrix of generalized headloss derivatives when the headloss is modelled by either the HW and the DW Generalized headloss derivatives for pipe Full WDS graph Diagonal matrix with elements  Vectors of unknown heads Heads at node Jacobian matrix Functions run once before multiple simulation Functions run once before hydraulic assessment Functions run every iteration Functions run once after hydraulic assessment Functions run once after multiple simulation Vector of pipe lengths Length of pipe Head loss exponent Number of forest pipes and nodes Number of junctions Number of pipes Number of fixed-head nodes Number of ST pipes and nodes Number of CT pipes Vector of unknown flows Flow in pipe Vector of Reynolds numbers Reynolds number for pipe Vector of start nodes Start nodes of pipe Diagonal matrix of Schur Complement when headloss is modelled by HW Generalized Schur Complement when the headloss is modelled by both the HW and the DW Set of node in graph Elevation at node Interpolating spline coefficient Interpolating spline coefficient Vector as defined in Eq. Vector of pipe roughness heights Roughness height for pipe  Set of ST pipes (edges) Set of complementary CT pipes (edges) Orthogonal permutation matrix for pipes in the ST Orthogonal permutation matrix for pipes in the CT A part of a basis for the null space of the permuted node-arc incidence for the RCTM Orthogonal permutation matrix for nodes in the ST Set of ST nodes (vertices) Schur complement for the RCTM