We consider the problem of scheduling a set of n jobs with arbitrary job sizes on a set of m identical and parallel batch machines so as to minimize the makespan. Motivated by the computational complexity of the problem, we propose a meta-heuristic based on the maxâ€“min ant system method. Computational experiments are performed with randomly generated test data. The results show that our algorithm outperforms several of the previously studied algorithms.With the popularity of intelligent electronics in daily life, the semiconductor industry has become one of the fastest growing and most competitive industries in the world. To enhance the competitiveness, the semiconductor manufacturers try their best to improve the efficiency of the manufacturing processes. Besides the production control methods based on dispatching rules, scheduling is crucial for the competitiveness of semiconductor manufacturing. The manufacturing of integrated circuits is a key business in electronics industry, where batch processing is a common procedure. The process of batching contributes to avoiding setups and facilitates the handling of materials. A batch is defined as a group of jobs that have to be processed jointly ( Batching problems can be found mainly in the oxidation/deposition/diffusion area of wafer fabs as well as the burn-in operation in the final testing ( The problem under study in this paper is the p-batch scheduling on parallel and identical batch-processing-machines (BPMs). Each machine has a fixed capacity The problem can be solved by dealing with two independent subproblems; i.e., grouping the jobs into batches and scheduling the batches on the parallel BPMs. Since minimizing the makespan for a set of equal-processing-time jobs on a single BPM is equvalent to the one-dimensional bin-packing problem which is known to be strongly NP-hard ( The rest of the paper is organized as follows. In Section In recent years, considerable research have been devoted to scheduling problems related to the BPM problems and the MMAS algorithms. Literature germane to the problem of scheduling on the BPMs and the MMAS algorithm will be presented in the next two subsections. Since the problem studied in this paper is p-batch scheduling, we focus on reviewing the studies that have commonalities in their assumptions with ours, especially those investigating the case of arbitrary job sizes. Researchers started studying the problem of batch scheduling from the simplest model; i.e., scheduling on a single BPM. And more of the early works on BPM focused on the model with identical job size.  Some researchers resort to meta-heuristic approaches. Recently, studies on batch scheduling problems have been expanded from a single BPM to parallel machines, because parallel machines are closer to real-world production systems. In order to be closer to the real world applications, the case of non-identical job sizes is considered.  Some researchers have tried to solve the parallel BPM problems by meta-heuristics. We refer the readers to the articles by There are two types of meta-heuristic algorithms: one type is based on the neighborhood search method and the other type is based on the constructive method ( MMAS, an improved variant of the ACO algorithms, aims to achieve good search performance by increasing the exploitation of the best solution found during the search process, and to avoid early search stagnation more effectively ( Only one ant, either the best solution in the current iteration (iteration-best ant) or the best solution from the beginning of the search (global-best ant), adds pheromone in each iteration to exploit the best solution. The pheromone trails of each solution are limited to a specific range to avoid stagnation in the search. The pheromone trails are initialized to its maximum to enhance the exploration of the search. Moreover, the convergence of MMAS algorithm has been theoretically proved by The studied problem can be denoted by A feasible solution of the problem The MMAS-based batching algorithm employs The Multifit algorithm takes the set of batches obtained by the MMAS-based batching algorithm and assigns the batches on the identical machines. It first computes a lower bound ( To solve batch scheduling problems with MMAS algorithms, there are two key concerns, i.e., how to encode the solutions and how to define the pheromone and heuristic information? Based on the constructive encoding method, each ant will generate a set of batches in each iteration, instead of generating a sequence of jobs. Intuitively, reducing the total processing time of all the batches tends to minimize the makespan of the problem. Therefore, our objective is to reduce the total processing time of all the batches. Furthermore, we find that the total wasted space (WS) of all the batches directly affects the total processing time of all the batches. Hence, our objective is to reduce the total wasted space of all the batches. Below we will describe the main steps of the proposed MMAS algorithm to obtain a better batching solution. Since each job is associated with its processing time and its size, we have to consider in the two-dimensional space. Because of the differences in processing times and sizes of the jobs in a batch, there will be wasted space in each batch. Below is the definition of the wasted space. Let In the formula Let  Let   According to Note that if In the process of batch formation, the ants choose the unscheduled jobs, step by step, based on pheromone trails and heuristic information between the jobs and the current batch. The pheromone trail represents the past experience of the ants in choosing this job. The definition of the pheromone trails is problem-specific and crucial to the quality of the solution. In our case, the feasible solution is constructed by selecting a job from the candidate set and adding it to the current batch iteratively. Thus, the pheromone trail, Note that Heuristic information is another important information in building up a batch, which usually indicates the cost, or the estimate of the cost, of adding a job to the current batch. In our problem, we define the heuristic information by using problem-specific knowledge of the objective. From Note that In each iteration, each ant generates a set of batches. The process of batching all the jobs is described as follows: Each ant Each ant Each ant After all the jobs are grouped by an ant, a local optimization algorithm based on recessive processing time (RPT) is used to improve the quality of the batch set. The RPT is defined as follows: Let Note that if there are two or more jobs having the largest processing time in the same batch, the largest processing time is only subtracted once in Eq. Let Because The RLOA Algorithm Input the batch set Sort the batches in For  while ( Merge the jobs of If the remaining jobs in Put the first If Goto the next  The most important means of exploitation in MMAS is that either the iteration-best or the global-best solution is used to update the desirability factor. The global-best solution is the best solution found so far. If we choose only the global-best solution, the search may concentrate too much around this solution and the probability of exploring better ones is decreased, which may result in a poor quality solution. Since the iteration-best solution vary from iteration to iteration, most of the components may be strengthened occasionally if the iteration-best solution is used in the update of the desirability factor, which will result in a better performance. Therefore, the iteration-best and the global-best solutions are alternately used in the desirability factor update. The iteration-best solution is chosen as the default and the global-best solution is only used every According to the definition in Section To keep the desirability factor from becoming too extreme during the search which may result in a search stagnation, the MMAS algorithm imposes a lower bound With the iterations of the algorithm, some desirability factors may become very small, which may decrease the diversity of solutions and cause stagnation in the search. More search diversification can be obtained if a reinitialization of desirability factors is performed ( The MMAS batching algorithm, combined with the RLOA algorithm, is described as follows: The MMAS Algorithm Compute the lower bound Initialize desirability factors: For   While  While  While  Calculate While For each For each  Update  Call the RLOA algorithm to optimize the Update the current iteration-best solution and global-best solution;  If Compute Update If  Output the global-best solution. The Multifit algorithm by The MF Algorithm Sort the batches in descending order of their processing times, i.e., Calculate  Assign the batches, one at a time, to the lowest-indexed machine such that the resulting completion time does not exceed If there is a batch that cannot be assigned to any machine, then Repeat To evaluate the performance of our algorithm, a series of computational experiments are performed in which various algorithms are tested and compared with on a set of randomly generated instances. Random instances are generated according to the method used in Like other meta-heuristics, the performance of an ACO algorithm is sensitive to the parameters that affect the search behavior and convergence speed. Hence, to gain better performance, it is desirable to determine the proper values of the parameters. For the proposed algorithm, the parameters that will affect its search performance include the number of ants It is intuitive that the more ants there are, the better the quality of the solution, and definitely the more computation time it takes. Without changing the other parameters, we run the proposed algorithm by using the parameter setting of Since there are some effect between different values of different parameters, we simultaneously determine the appropriate values for To verify that all the heuristics are implemented correctly, we experiment with the CPLEX, a mixed-integer linear programming solver, for very small-size problem instances. We randomly generate 10 instances of 20 jobs and 2 machines, where the jobs sizes of 5 instances are in Comparative experiments are conducted to evaluate the efficiency and effectiveness of the ASM algorithm. All of the algorithms are programmed in C++ and executed on a PC with an Intel Core 2 processor and 2G RAM.            From       As can be observed from the above experimental results, the overall performance of the ASM algorithm is better than that of the other algorithms, which demonstrates the effectiveness and efficiency of the proposed algorithm. This is due to the effective mechanisms used in the ASM algorithm. The candidate set exploits the knowledge of the problem and it is able to decrease the search space significantly to find better solutions with less running time. Moreover, the local optimization strategy further improves the solution quality. In this paper, we consider the batch scheduling on identical and parallel machines with non-identical job sizes to minimize the makespan. We present a novel ACO-based meta-heuristic algorithm, called ASM, to solve this problem. Based on the equivalence between minimizing the wasted space and minimizing the makespan, a candidate set strategy is introduced to decrease the search space and improve the search performance efficiency. A local optimization strategy based on recessive processing time is incorporated in the algorithm to further enhance the solution quality. Then the Multifit method is applied to schedule the batches on the machines. Experimental results show that the proposed algorithm is capable of finding higher quality solutions than all the other heuristics. Moreover, the running time is comparable to that of the HGH. Future work will focus on applying the proposed algorithm to the scheduling on parallel and identical batch machines with release dates, incompatible families, setup time or other constraints. Scheduling on parallel machines with different capacities is also an interesting problem. Other optimization objectives such as maximum lateness and mean weighted flow time are unexplored. The work of the first author is supported by Grants from the See