Change of support is a common issue in the geosciences when the volumetric support of the available data is smaller than that of the blocks on which numerical modeling is required. In this paper, we present two algorithms for the direct block-support simulation of cross-correlated random fields that are monotonic transforms of stationary Gaussian random fields. The first algorithm is a variation of sequential Gaussian co-simulation, in which each block value is simulated in turn, conditionally to the original data and to the previously simulated block values, while the second algorithm is based on spectral co-simulation in the framework of the discrete Gaussian change-of-support model. These two algorithms are implemented in computer programs and applied to a synthetic case study and to a mining case study. Their properties and performances are compared and discussed.The numerical modeling of regionalized variables in the geosciences faces the problem that, most often, the volumetric support of the available samples is several orders of magnitude smaller than that at which modeling is required. In mining, drill hole samples are cylindrical volumes a few inches in diameter and several meters long, whereas selective blocks may be of thousands of cubic meters. Likewise, the volumetric support required for flow simulation or reservoir modeling is much larger than the cores obtained from wells. When passing from the quasi-point support of the samples to the block volume, a model is needed in order to account for the change in the statistical properties of the variable(s) under study. The traditional approach for constructing numerical models at a block support is to discretize each block into a finite set of points, perform point-support simulation, and average the point-support values simulated within each block ( In this context, the goals of this paper are threefold: (1) to propose algorithms for directly simulating one or more cross-correlated variables at a block support; (2) to illustrate their applicability, strengths, and weaknesses through examples and case studies; and (3) to provide practical considerations and computer codes for practitioners. Specifically we will consider a variation of the sequential Gaussian algorithm, as well as a discrete spectral algorithm in which an explicit change-of-support model (the discrete Gaussian model) is incorporated within the simulation procedure. So far, such a change-of-support model has been essentially associated with sequential and turning bands simulation in the univariate context ( Consider a regionalized variable, viewed as a realization of a real-valued random field The well-known sequential Gaussian algorithm (e.g., Divide the simulation domain into non-overlapping blocks. Select a block Simulate the Gaussian random field Back-transform and regularize the values simulated at step (3): In this work, the weights { Summarize the point-support Gaussian values simulated at step (3) by a weighted sum of the form Concerning the choice of the weights { Incorporate the Gaussian variable Go back to step (2) until all the blocks are simulated. The idea behind step (5) is to replace a large number of point-support conditioning data by a single block-support datum, so that sequential simulation requires much less data than in the traditional approach, hence less CPU-time and memory requirements. Since The previous algorithm is implemented in a Matlab program called Block-support simulation of one or several transformed Gaussian random fields. There is no restriction on the number of such fields other than memory limitations. Simulation is performed in R The user also has to indicate the number of points discretizing the blocks along each direction. Some considerations on this matter are indicated in Simulation can be conditioned to point-support data. In the multivariate case, program BLOCKSGCOSIM handles heterotopic data sets, for which not all the variables are known at each data location. Missing values can be codified as NaN (not-a-number) or as values outside a trimming limit interval. Non-conditional simulation is done when the data file does not exist. The transformation function Accordingly, for each variable, the user must specify the minimal and maximal values ( The spatial structure of the point-support Gaussian random field(s) is represented by a linear model of (co)regionalization ( There is no restriction on the number of nested structures that can be used in the linear model of (co)regionalization. Each structure can have a geometric anisotropy and is defined by three angles and three scale factors ( Two strategies are considered for searching neighboring conditioning data ( At each block, the set of Gaussian random variables to be simulated at the discretizing locations { Conditioning can be done by either simple or ordinary co-kriging (sub-routine COKRIGE1); the choice of one or the other co-kriging type depends on whether or not the average values of the Gaussian random fields are assumed known. The blocks targeted for simulation can be visited according to a regular or to a random sequence, with a possible definition of multiple grids in the case of gridded blocks ( BLOCKSGCOSIM creates an external ASCII file, in which each column corresponds to one realization of one variable (the first columns correspond to the first realization of the whole coregionalization, and so on). Another approach for direct block-support simulation is to incorporate an explicit change-of-support model into the simulation algorithm. So far, several attempts have been made to combine generic change-of-support models into the sequential simulation algorithm, in order to estimate the successive conditional distributions ( We will preserve the notations used in {  The algorithm for direct block-support simulation consists of the following steps. Divide the simulation domain into non-overlapping blocks. Calculate the normal score values ( Simulate the regularized Gaussian random field { Simulate the point-support Gaussian random field { Condition { Back-transform the conditioned random field obtained at step (5), as per Eq. This algorithm is a variation of the proposal by The proposed algorithm can also be generalized to the multivariate case, in order to co-simulate a set of cross-correlated transformed Gaussian random fields at a block support (for conditioning, it suffices to substitute co-kriging for kriging; for non-conditional co-simulation, see The spectral algorithm is implemented in a Matlab program ( Block-support simulation of one or several transformed Gaussian random fields. The correlation structure of these Gaussian random fields is represented by a linear model of coregionalization; if need be, any new basic covariance model can be added in sub-routine COVA. There is no restriction on the numbers of random fields to simulate and of nested structures used in the coregionalization model. Simulation is performed in R Simulation can be conditioned to data (heterotopic data sets and missing values can be handled as in program BLOCKSGCOSIM). The point-support transformation functions are modeled according to Eq. For conditioning co-kriging, a unique neighborhood is used if the data search radii are set to infinity. Otherwise, for each block, the conditioning data are searched by using super-blocks and an ellipsoid/octant search (sub-routines PICKSUPR, SUPERBLK, and SEARCH). Conditioning is done by simple or ordinary co-kriging; the dual form of co-kriging is used in case of a unique neighborhood (sub-routines COKRIGE2, DUAL, and SETDUAL). As for BLOCKSGCOSIM, BLOCKSPECOSIM creates an ASCII output file with one realization of one variable per column. In the 2D plane, let us consider the non-conditional simulation of a transformed Gaussian random field over a regular grid with 10×10 blocks with size 10×10, each block being discretized into 5×5 points. Three approaches are compared: Sequential block-support simulation by using program BLOCKSGCOSIM. The grid nodes are visited in a random sequence and the successive conditional distributions are calculated by considering the 30 nearest simulated block-values. Spectral block-support simulation by using program BLOCKSPECOSIM. Point-support simulation at the discretization points via the discrete spectral algorithm and regularization to the block support. Because the points are on a regular grid, this approach is perfectly accurate ( The variogram is the sum of a nugget effect (between 0% and 75% of the total unit sill) and an isotropic spherical model with a range of between 10 and 50 units. This yields 12 different cases that are numbered as in For each case, a total of 10,000 realizations are constructed, from which the distributions of the spatial average, variance, and variogram at the first lag vector are calculated. These distributions are summarized via box-plots indicating the mean value (as a circle), as well as the 5%, 25%, 50%, 75%, and 95% quantiles ( It is seen that the two proposed approaches for direct block-support simulation reproduce fairly well the statistics (average, variance, variogram) obtained by regularizing the point-support realizations. This result was predictable when the transformation function is equal to the identity function ( The second application deals with a porphyry copper deposit located in northern Chile. The data set under study consists of 10,306 drill hole samples composited at 1.5 The analysis consists of the following steps: Cell declustering of the original data. Transformation of the copper and arsenic data to normal scores. Calculation of the sample simple and cross variograms of the normal scores data. Fitting of a linear model of coregionalization. The nested structures correspond to a nugget effect and two anisotropic exponential models ( In the previous equation, the distances into brackets correspond to the practical ranges along the horizontal and vertical directions, respectively. Definition of a regular grid covering the area of interest. Such a grid contains 16×20×30 blocks with size 15 Construction of 100 conditional realizations of copper and arsenic block grades with each of the two programs BLOCKSGCOSIM and BLOCKSPECOSIM; see For each realization, calculation of the basic statistics on the copper and arsenic grades (averages, standard deviations, coefficient of correlation) and of the recoverable copper resources (namely, the fraction of total tonnage and mean copper grade above cut-off) with and without a constraint on the maximum allowable arsenic grade (500 Although some fluctuations can be seen in the resulting statistics ( In terms of CPU time required for constructing the realizations on a Pentium IV desktop with 2.83 Sequential co-simulation could be speeded up by considering the same path for all the realizations, thus a single search and co-kriging for determining conditional distributions. Such an implementation leads to a total CPU time of 154 Further improvements to reduce CPU time (not implemented in BLOCKSGCOSIM and BLOCKSPECOSIM) could be obtained by recourse to fastest algorithms for searching the conditioning neighboring data, e.g., octrees, and to parallel computing ( Although they rest on different paradigms, the proposed sequential and spectral algorithms have several common properties: Both algorithms make use of a regularized Gaussian random field (Eqs. Both algorithms allow simulating in a single step random fields whose covariance function consists of several nested structures. This is different from other approaches such as turning bands simulation, in which each nested structure is treated separately. Both algorithms may be impractical if too many blocks or too many variables have to be simulated, insofar as the entire set of simulated values must be kept in memory. However, since blocks are directly simulated, this problem is less important than in the case of point-support sequential or spectral simulation followed by block averaging. Each algorithm also has specific properties and restrictions. In the sequential algorithm, one difficulty is the choice of the neighborhood in which to search for the conditioning information (in particular, for the previously simulated block values). As for the discrete spectral approach, it only allows the simulation on gridded blocks, which is consistent with the assumptions underlying the discrete Gaussian change-of-support model, while some short-scale information is lost due to the randomization of the data locations within the blocks. Besides, due to possible occurrence of negative Fourier coefficients, discrete spectral simulation may not be perfect, in particular if the correlation range is large or in case of a coregionalization model with a zonal anisotropy; this problem can be solved by setting the negative Fourier coefficients to zero or by increasing the size of the simulation domain ( The traditional approach (point-support simulation on a dense grid followed by block regularization) is appealing because it does not require any additional hypothesis to perform change of support. With suitable algorithms such as turning bands, it is flexible with respect to block and data locations (there is no need for gridded blocks or for data migration to block centers) and large simulation domains can be simulated in separated runs, avoiding memory storage problems ( The advantages of direct block-support simulation are the reduction of CPU time and, for specific algorithms such as the sequential and discrete spectral, the lower memory requirements with respect to the traditional approach. The results shown in This research was funded by the Chilean Commission for Scientific and Technological Research (CONICYT) through FONDECYT Project 1090013. The authors acknowledge two anonymous reviewers for their constructive comments, as well as the support of the Advanced Laboratory for Geostatistical Supercomputing (ALGES) and the Advanced Mining Technology Center at University of Chile. The discretization of blocks by points occurs at two levels: Discretization needed in the traditional and the proposed sequential approaches, for averaging point-support simulated values. Discretization needed in direct block-support simulation (sequential or spectral) for calculating point-to-block and block-to-block covariances. Both discretization levels conform to the idea of replacing the true block value (an integral calculated over the block) by an arithmetic average over a set of Considerations to determine an adequate block discretization include: The support of the conditioning data, which may not be exactly a “point” support (e.g., composite data along drill holes). The anisotropy of the fitted covariance or variogram models. The robustness of the calculated point-to-block and block-to-block covariances, which should change little when increasing the discretization. For instance, in the presented mining case study, one deals with composite data of 1.5 The discrete spectral simulation algorithm allows simulating a Gaussian random field on a regular grid, and has been already described by several authors (e.g., Consider a periodized covariance function and compute the covariance values between grid nodes. The size of the grid should be at least twice the size of the final simulation domain along each direction. Compute the Fourier transform of the previous covariance values. If need be, set the negative Fourier coefficients to zero. Simulate two sets of mutually independent Gaussian random variables, with means equal to zero and variances related to the Fourier coefficients obtained at the previous step. Combine these variables into a set of complex Gaussian random variables. Re-arrange the simulated random variables to handle the symmetries and periodicities implied by the use of discrete Fourier transforms, see Invert the sequence of complex Gaussian random variables using the inverse Fourier transform. This yields a sequence of random variables with the periodized covariance calculated at step (1). Along each direction, discard the random variables associated with coordinates greater than half the grid size. As mentioned by The previous algorithm can be extended to the multivariate case. It suffices to replace the scalar terms at steps (1)-(2) (covariance values and Fourier coefficients) by matrix terms, and to consider random vectors instead of random variables at steps (3) to (6). The Fourier matrices (step (2)) must be positive semi-definite, otherwise a positivity correction can be considered ( Supplementary data associated with this article can be found in the online version at 