Crushing plants are used both by aggregate producers and the mining industry. The overall crushed rock product production process can be improved by means of computer simulation and optimisation. To achieve optimal performance of a crushing plant, not only the design of the individual machines but also the cost of running them should be taken into account.
                  In this paper a novel method for the modelling and optimisation of crushing plants is presented based on the structural modelling of crushing plants and parameter optimisation. Structural modelling is performed by utilizing mathematical models of the different production units, rock materials and economics of the crushing plant. A model that takes customer demands on the different products into consideration is also included. A statement of the problem of crushing plant optimisation is formulated and a genetic evolutionary algorithm has been included in the software in order to facilitate the optimisation process.
                  The efficiency of the proposed algorithm is demonstrated with reference to a crushing plant containing a small number of machines. It is shown how the knowledge gained from the simulation and optimisation can be used to improve the overall production of crushed rock material. Depending on the optimisation criteria, the result obtained can include maximized profit, maximized desirable fractions, increased product quality, and increased machine efficiency.Plant modelling for simulation and optimisation purposes is currently performed in many industries. The aim is to identify the optimum settings for the different plant units so that the total plant runs as efficiently as possible. A simulation tool alone will not be sufficient to identify optimal plant settings within a reasonable time, even in the case of a small plant with a limited number of optimisation parameters. As evidence of this, an example of a crushing plant for iron ore production will be presented. The challenge of running a crushing plant as efficiently as possible is knowing how each individual production unit affects the efficiency of the whole plant. In the case of a crushing plant, the optimisation target can be to maximize profit and increase product quality. The optimal parameter setting is usually not found since there are several parameters that can be altered and it is not easy to predict how a change in a particular parameter value will alter the crushing plant performance. A change in a primary crusher will affect the downstream production in the plant in such a way that the quality and amount of products produced changes. It is difficult to establish how best to change the crusher parameters without the aid of a computer equipped with powerful software capable of finding the global optimum. This paper describes some of the main features of the software that has been developed to solve such problems. The software has been developed in Visual C++. It has a graphic user interface for crushing plant modelling and uses a “drag and drop”-style concept. Optimisation parameters for the various units can be easily selected via the dialog boxes. The first part of the development process of the new optimisation tool was to establish modelling guidelines. To design a suitable model for the optimisation of a production plant requires a modelling strategy. The strategy selected is illustrated in To describe the crushing plant, a number of mathematical models and constraints related to the crushing plant machines are added. These models are connected to each other to form the crushing plant model, which describes the total production of the plant. The resulting model includes the parameters to be optimised. After running the model, the results are evaluated with reference to a cost function. The value calculated by the cost function can be used in an optimisation routine to evaluate the quality of selected parameter values. To accomplish this, several different models are required, see First of all, models of the various production units are necessary in order to describe the transformation of the rock material as it passes through the unit. These models must describe the change in particle size distribution. These production unit models are closely linked to the rock material model, which contains information about rock properties that affect production. More than just the physical properties of a crushing plant must be included in order to achieve realistic optimisation. The software also includes a model of the economics of each unit. The main reason for this is to have a cost function for evaluating the performance of the crushing plant from the perspective of the owner. The final model implemented in the software is based on customer demand. The optimised setting of the plant must generate an adequate level of product quality. This will set the main constraints for optimisation. The different types of models are described below. To design a crushing plant model, each production unit must be modelled. The models are then combined to form a crushing plant model, which implies that they must all be modelled in the same way in order to make them compatible with each other. In a crushing plant there are a number of different production units. These can be divided into different sub groups depending on their main purpose. This creates a model tree structure, see In this paper only the general demands placed at the top of the model tree will be described. As previously stated, the input to a model is the vector of design parameters According to Eq. The rock material transported between the different production units must also be modelled. This model must fulfil the information requirements of the different production unit models. This means that all parameters that affect the outcome of the different production units are included. Examples of such parameters are Bond work index, moisture content and bulk density. In the future, the addition of more advanced crusher models will allow a better description of rock breakage behaviour, thus enhancing the accuracy of the model. In order to calculate the production cost of each product, the rock material model described above must also include information about the current cost of production. Since the costs in each type of production unit can result from a number of different activities, the model must be flexible. Another cost related aspect is that it can be hard to calculate the exact cost of the different activities, one example being the labour costs incurred by each unit. The cost of production in each unit is therefore divided into two types, cost per ton When a simulation is run, the two costs in every unit are calculated as a single cost per ton The total cost per ton The products produced by the crushing plant will in most cases be sold to a customer or further processed by the company. It is most likely that the properties of the products produced by the crushing plant have to fulfil certain demands. One of the most common requirements is a limitation in the level of over- and undersize percentage allowed. This naturally places constraints on production that must be taken into account in the optimisation. The user has therefore the option of specifying the maximum over- and undersize percentages for each of the products. Optimisation implies maximizing the gross profit of the crushing plant. The outcome of the optimisation must be a solution that fulfils customer demands, which can be achieved using the models described above. The models used in the software are fully automated so that the user needs very little knowledge of exactly how the modelling works. The optimisation process starts by searching the models for the design parameters of the production units chosen for optimisation. These parameters are then included in the optimisation routine, which finds the best solution within the existing constraints. The constraints inherent in the optimisation of crushing plants can be divided into two types that must be handled in different ways. The first is that some production units have a combination of optimisation parameters, for example a throw and mantle set in a cone crusher, which cannot be used due to incompatibility. In such cases each unit model reports an error, which takes place before simulation is performed. The other type of constraint is related to product quality, as discussed earlier. Some combinations of parameter values might result in an excess of over- or undersize in one or more products. It is impossible to predict this before the simulation is run. Combinations that generate this type of result must therefore be discarded. The combination of the upper A cost function is needed in order to evaluate the result of every simulation performed by the optimisation routine. Since the entire plant is being optimised, it is necessary to have a cost function that evaluates the total production. The value from this evaluation is known as the fitness value. Usually the owner of a plant can be expected to focus on maximizing the plant’s profitability. The most suitable fitness value in this optimisation is therefore the gross profit of the crushing plant. The cost function will give a high fitness value to a solution that yields the highest gross profit. One might think that it is sufficient to optimise the most desirable fraction but this will in many cases result in a sub optimal solution. If the plant produces a number of different products and one is maximized, it is likely that other products that are profitable are sacrificed or leading to more products with a low or negative gross profit. Undesirable production of fines is a typical example. Larger products will be crushed to maximize the optimised product, creating more smaller products, including fines. When using gross profit as the cost function, the correct mix between the different products is established. As mentioned above, the production cost is calculated by adding the total cost per ton In Eqs. Using Eqs. The function The software optimisation routine has two main components. One is the subroutine for generating parameter values and the other is the simulation subroutine for evaluating the values generated. The optimisation simulation subroutine is not quite identical to that normally used for simulation only. It has some additional features that make it compatible with the optimisation subroutine. The software developed optimises the steady state process of a crushing plant. Transient operations connected to processual changes and restarts are not included since they involve such a small part of the total operational time in most crushing plants. In order to simulate steady state, the simulation subroutine has to calculate the optimal amount of feed material to the plant which causes the bottleneck production unit operate at full capacity. When a simulation is run, steady state must be reached as quickly and accurately as possible. Speed is essential in order to minimize the total calculation time of the optimisation, especially as the simulation is used so frequently. Accuracy is necessary to ensure that the optimisation results in the correct decision regarding the generated solution. As mentioned previously, the optimisation problem can be formulated as maximizing the gross profit of the crushing plant: In recent years various genetic evolutionary algorithms have been successfully implemented in a wide range of applications. A genetic evolutionary algorithm can be used for finding optimum or near optimum parameters in applications similar to crushing plants. Examples of such applications are membrane separation, industrial hydrogen plants and multi machine power system stabilizers ( Each individual is represented by a DNA-string where each chromosome represents one optimisation variable of the crushing plant model. Use of a genetic evolutionary algorithm alone has been shown to be rather slow and not totally accurate for identifying the global optimum ( The algorithm starts by forming a population of individuals. The first step is to assign values to the chromosomes. This is done by randomly selecting a value for every chromosome within the limits. This process will form a population where each individual has a different DNA-code. To evaluate the individual, the DNA-code is placed in the crushing plant model and a simulation is performed. The result of the simulation is evaluated by means of a cost function. The value generated by the cost function is known as the “fitness of the individual”. To improve the individual, the hill climbing routine searches for neighbourhood solutions with better fitness. If a better solution is found, the individual is updated with the new parameter values. The hill climbing routine is repeated until no better solution is available. After the improvements resulting from the hill climbing, the populations are checked for the presence of twins. A twin is an individual with identical DNA-values to those of another individual. If a twin is found, it is not added to the population. The process of creating new individuals is terminated if either a large enough population is achieved or the routine fails to create any unique individuals after a specified number of attempts. The next step in the process is forming new individuals from the existing ones. This process randomly selects two individuals using a roulette wheel type selection. The size of the slots in the roulette wheel depends on the individual’s fitness. Higher fitness leads to a larger slot, thus increasing the likelihood of selection. When two individuals have been selected, their DNA-codes are used to form a new individual. The new individual’s DNA is formed by a random selection of chromosomes from the parents: The parameters of the new individual are then placed in the model and a simulation is performed. As before, the hill climbing routine further improves the individual until a local optimum is reached. The optimisation routine now has two options; either accept or discard the new individual. The new individual is discarded if it has a twin in the current population or if its fitness is lower than the lowest fitness in the current population. If accepted, it will replace the individual in the population with the lowest fitness. The process of combining individuals to form new and better ones continues until a stop criterion is fulfilled. Thus, if no new individuals are accepted into the population after a specified number of attempts, the routine is stopped. The best individual in population To illustrate how this new software can be used for the optimisation of a crushing plant, an example taken from iron ore production is presented. Although the plant is nonexistent, it is inspired by a real crushing plant. It consists of two Sandvik Hydrocone crushers and two generic screens with a steel wire screen cloth. The task of this plant is to produce lump iron ore and fines. This example was chosen as it is fairly easy to understand while the optimisation task is quite complex with approximately three million possible parameter combinations. The layout of the plant is shown in The two products produced by the crushing plant have different values for the customer. In this example the ratio between the lump and fines is As previously stated, the optimal settings should not only maximize the amount of material in one stockpile, and this example illustrates the reason why. Since both piles have a value ratio that is quite close to one, the optimisation algorithm should make a trade off between high capacity and a large amount of products in both piles or restricting capacity and having more products in the lump iron ore pile that are worth more. The plant consists of two crushers and two screens. In the optimisation the closed side setting and throw for both crushers and the aperture size of the final screen were included. The models and specification of the crushers have a capacity of the same magnitude. The iron ore consumer places restrictions on the amount of over and undersize in lump iron ore. There is also a restriction on the amount of oversize permissible in the fines pile. In this example the two types of cost described above are assigned to the production units. These values in the lump iron ore production plant can be seen in After running the optimisation routine on the current example the parameter setting shown in A simulation and optimisation tool has been successfully developed, using a novel method for crushing plant optimisation that not only includes the performance of the different production units but also takes their economic aspects into account. This determines the most profitable setting for the plant. As shown in the paper it is possible to use a genetic evolutionary algorithm to find the optimal parameter values for a crushing plant. This brings the optimisation from production unit level to that of the entire plant, thus ensuring maximum profits as well as optimal production in line with customer demands. As can be seen in the lump iron ore example, the optimisation routine uses all possible measures to achieve as large a percentage as possible of the total mass flow in the lump pile. It makes the aperture size on deck 1 as wide as possible in order to maximize the oversize. Such extremes can however, be hard to maintain in a real crushing plant due to wear on different production unit parts. The next step in the project will therefore be to make the solution more robust in terms of parameter variation. This will necessitate the development and implementation of a wear model as well as placing higher demands on the cost function since it must evaluate the production over a period of time. We would like to thank Professor Viktor Berbyuk, Machine and Vehicle Systems, for his help with the theoretical model for optimisation. The authors would also like to thank the sponsors of the “Design and operation of crushing plants” project: Sandvik Rock Processing, Swedish Aggregates Producers Association (SBMI) and the Development Fund of the Swedish Construction Industry (SBUF). Sandvik Rock Processing is acknowledged for the use of their crusher model. Dr Monica Soldinger Stafhammar is also acknowledged for the use of her screen model.